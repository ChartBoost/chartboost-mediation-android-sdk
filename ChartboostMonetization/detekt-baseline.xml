<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues>
    <ID>LongParameterList:UrlOpener.kt$( args: UrlArgs, context: Context = getApplicationContext(), intentResolver: IntentResolver = getIntentResolver(), uriParser: (String) -> Uri = Uri::parse, intentFactory: (Uri) -> Intent = { Intent(Intent.ACTION_VIEW, it) }, mainDispatcher: CoroutineDispatcher = Dispatchers.Main, )</ID>
    <ID>MayBeConst:UrlProcessor.kt$private val MARKET_WEB = "https://play.google.com/store/apps/details?id=%s"</ID>
    <ID>EmptyFunctionBlock:EndpointRepositoryBase.kt$EndpointRepositoryBase${}</ID>
  </ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:Analytics.kt$Analytics$productId.isNullOrEmpty() || productTitle.isNullOrEmpty() || productDescription.isNullOrEmpty() || productPrice.isNullOrEmpty() || productCurrencyCode.isNullOrEmpty()</ID>
    <ID>ComplexCondition:ChartboostDSPHelper.kt$ChartboostDSPHelper$isDSP &amp;&amp; dspCode != null &amp;&amp; dspCode.length == 4 &amp;&amp; creativeTypes != null &amp;&amp; creativeTypes.isNotEmpty() &amp;&amp; creativeTypes.size &lt; 10</ID>
    <ID>ComplexCondition:PutDataUseConsentUseCase.kt$PutDataUseConsentUseCaseImpl$dataUseConsent is GDPR || dataUseConsent is CCPA || dataUseConsent is COPPA || dataUseConsent is LGPD || dataUseConsent is Custom</ID>
    <ID>ComplexCondition:SdkInitializer.kt$SdkInitializer$appId.isEmpty() || appSignature.isEmpty() || appId.length != VALID_APP_ID_LENGTH || appSignature.length != VALID_SIGNATURE_LENGTH || !VALID_CHARS_REGEX.matches(appId) || !VALID_CHARS_REGEX.matches(appSignature)</ID>
    <ID>CyclomaticComplexMethod:AdErrorParser.kt$fun parseCBImpressionErrorToShowError(error: CBError.Impression): ShowError</ID>
    <ID>CyclomaticComplexMethod:CBViewProtocol.kt$CBViewProtocol$fun sendWebViewVastOmEvent(event: VastVideoEvent)</ID>
    <ID>CyclomaticComplexMethod:OrientationHelper.kt$private fun Context?.getOrientation(displayMeasurement: DisplayMeasurement): Orientation</ID>
    <ID>EmptyFunctionBlock:AdsMediaPlayer.kt$AdsMediaPlayer${}</ID>
    <ID>EmptyFunctionBlock:CBHtmlWebViewProtocol.kt$CBHtmlWebViewProtocol${}</ID>
    <ID>EmptyFunctionBlock:CBMraidWebViewProtocol.kt$CBMraidWebViewProtocol${}</ID>
    <ID>EmptyFunctionBlock:EndpointRepositoryBase.kt$EndpointRepositoryBase${}</ID>
    <ID>EmptySecondaryConstructor:TestContainerBuilder.kt$TestContainerBuilder${}</ID>
    <ID>FunctionOnlyReturningConstant:OpenMeasurementManager.kt$OpenMeasurementManager$private fun omidPartnerName()</ID>
    <ID>InvalidPackageDeclaration:Base64Wrapper.kt$package com.chartboost.sdk.internal.utils</ID>
    <ID>InvalidPackageDeclaration:ExceptionUtils.kt$package com.chartboost.sdk.internal.utils</ID>
    <ID>InvalidPackageDeclaration:ImpressionActivityIntentWrapper.kt$package com.chartboost.sdk.internal.utils</ID>
    <ID>InvalidPackageDeclaration:JsonUtils.kt$package com.chartboost.sdk.internal.utils</ID>
    <ID>InvalidPackageDeclaration:RandomAccessFileWrapper.kt$package com.chartboost.sdk.internal.utils</ID>
    <ID>InvalidPackageDeclaration:ResourceLoader.kt$package com.chartboost.sdk.internal.utils</ID>
    <ID>InvalidPackageDeclaration:SharedPrefsHelper.kt$package com.chartboost.sdk.internal.utils</ID>
    <ID>InvalidPackageDeclaration:SystemUtils.kt$package com.chartboost.sdk.internal.utils</ID>
    <ID>LargeClass:AdUnitRendererTest.kt$AdUnitRendererTest</ID>
    <ID>LargeClass:CBImpressionTest.kt$CBImpressionTest : BehaviorSpec</ID>
    <ID>LargeClass:VideoRepositoryMediaPlayerTest.kt$VideoRepositoryMediaPlayerTest</ID>
    <ID>LongMethod:AdUnitRendererTest.kt$AdUnitRendererTest$@Before fun setup()</ID>
    <ID>LongMethod:BannerApiTest.kt$BannerApiTest$@Before fun setup()</ID>
    <ID>LongMethod:ImpressionViewProtocolBuilder.kt$ImpressionViewProtocolBuilder$fun prepareViewProtocol( location: String, adUnit: AdUnit, adTypeTraitsName: String, html: String, adUnitRendererImpressionCallback: AdUnitRendererImpressionCallback, impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, nativeBridgeCommand: NativeBridgeCommand, ): CBViewProtocol</ID>
    <ID>LongMethod:InterstitialApiTest.kt$InterstitialApiTest$@Before fun setup()</ID>
    <ID>LongMethod:OpenRTBTest.kt$OpenRTBTest$fun appendRequestBodyOpenRTBConsent( consent: String, expectedConsent: Int, )</ID>
    <ID>LongMethod:OpenRTBTest.kt$OpenRTBTest$private fun appendRequestBodyOpenRTBParams(isOmEnabled: Boolean)</ID>
    <ID>LongMethod:RequestBodyFieldsTest.kt$RequestBodyFieldsTest$@Test fun verifyFields()</ID>
    <ID>LongMethod:RewardedApiTest.kt$RewardedApiTest$@Before fun setup()</ID>
    <ID>LongMethod:VideoRepositoryMediaPlayerTest.kt$VideoRepositoryMediaPlayerTest$@Test fun deleteCacheFolderTest()</ID>
    <ID>LongMethod:VideoRepositoryMediaPlayerTest.kt$VideoRepositoryMediaPlayerTest$@Test fun onAnyErrorTriggerDownloadAgainTest()</ID>
    <ID>LongParameterList:AdContainer.kt$AdUnitManagerModule$( private val androidComponent: AndroidComponent, private val applicationComponent: ApplicationComponent, private val adType: AdType, private val renderComponent: RenderComponent, private val openMeasurementComponent: OpenMeasurementComponent, private val mediation: Mediation?, private val impressionComponent: ImpressionComponent, private val trackerComponent: TrackerComponent, )</ID>
    <ID>LongParameterList:AdLoader.kt$AdLoaderImpl$( callback: CBRequest.CBAPINetworkResponseCallback, height: Int, width: Int, location: String, impressionCounter: Int, requestBodyFields: RequestBodyFields, openMeasurementManager: OpenMeasurementManager, )</ID>
    <ID>LongParameterList:AdLoader.kt$AdLoaderImpl$( callback: CBRequest.CBAPINetworkResponseCallback, location: String, impressionCounter: Int, isCacheRequest: Boolean, requestBodyFields: RequestBodyFields, openMeasurementManager: OpenMeasurementManager, )</ID>
    <ID>LongParameterList:AdLoader.kt$AdLoaderImpl$( location: String, height: Int, width: Int, isCacheRequest: Boolean, requestBodyFields: RequestBodyFields, callback: CBRequest.CBAPINetworkResponseCallback, openMeasurementManager: OpenMeasurementManager, )</ID>
    <ID>LongParameterList:AdLoader.kt$AdLoaderImpl$( private val adTraits: AdType, val fileCache: FileCache, val requestBodyBuilder: RequestBodyBuilder, val networkService: CBNetworkService, private val adUnitParser: AdUnitParser, private val openRTBAdUnitParser: OpenRTBAdUnitParser, private val openMeasurementManager: OpenMeasurementManager, private val eventTracker: EventTrackerExtensions, private val endpointRepository: EndpointRepository, )</ID>
    <ID>LongParameterList:AdUnitLoader.kt$AdUnitLoader$( private val adType: AdType, private val fileCache: FileCache, private val reachability: CBReachability, private val videoRepository: VideoRepository, private val assetsDownloader: AssetsDownloader, private val adLoader: AdLoader, private val ortbLoader: OrtbLoader, private val mediation: Mediation?, private val eventTracker: EventTrackerExtensions, )</ID>
    <ID>LongParameterList:AdUnitRenderer.kt$AdUnitRenderer$( private val adType: AdType, private val reachability: CBReachability, private val fileCache: FileCache, private val videoRepository: VideoRepository, private val impressionBuilder: ImpressionBuilder, private val adUnitRendererShowRequest: AdUnitRendererShowRequest, private val openMeasurementController: OpenMeasurementController, private val viewProtocolBuilder: ImpressionViewProtocolBuilder, private val rendererActivityBridge: RendererActivityBridge, private val nativeBridgeCommand: NativeBridgeCommand, private val templateLoader: TemplateLoader, val mediation: Mediation?, private val uiScope: CoroutineScope = CoroutineScope(Dispatchers.Main), private val eventTracker: EventTrackerExtensions, private val endpointRepository: EndpointRepository, )</ID>
    <ID>LongParameterList:AdsExoPlayer.kt$AdsExoPlayer$( context: Context, exoPlayerFactory: ExoPlayerFactory = ExoPlayerFactory(context), private val exoPlayerMediaItemFactory: ExoPlayerMediaItemFactory, private val surfaceView: SurfaceView, private val callback: AdsVideoPlayerListener? = null, uiPoster: UiPoster, videoProgressFactory: VideoProgressSchedulerFactory, )</ID>
    <ID>LongParameterList:AdsMediaPlayer.kt$AdsMediaPlayer$( private var mediaPlayer: MediaPlayer? = MediaPlayer(), private var surface: SurfaceView?, private var callback: AdsVideoPlayerListener?, private val uiPoster: UiPoster, videoProgressFactory: VideoProgressSchedulerFactory, private val videoBufferFactory: VideoBufferFactory, private val coroutineDispatcher: CoroutineDispatcher = Dispatchers.Main, private val fileCache: FileCache, )</ID>
    <ID>LongParameterList:Analytics.kt$Analytics$( title: String, description: String, price: String, currency: String, productID: String, purchaseData: String?, purchaseSignature: String?, )</ID>
    <ID>LongParameterList:Analytics.kt$Analytics$( title: String, description: String, price: String, currency: String, productID: String, userID: String?, purchaseToken: String?, )</ID>
    <ID>LongParameterList:AnalyticsApi.kt$AnalyticsApi$( eventLabel: String, type: Analytics.LevelType, mainLevel: Int, subLevel: Int, description: String, timestamp: Long, )</ID>
    <ID>LongParameterList:AnalyticsApi.kt$AnalyticsApi$( productID: String, title: String, description: String, price: String, currency: String, purchaseData: String?, purchaseSignature: String?, userID: String?, purchaseToken: String?, iapType: Analytics.IAPType, )</ID>
    <ID>LongParameterList:BannerApi.kt$BannerApi$( private val adUnitLoader: AdUnitLoader, private val adUnitRenderer: AdUnitRenderer, private val uiPoster: UiPoster, private val sdkConfig: AtomicReference&lt;SdkConfiguration>, backgroundExecutor: ScheduledExecutorService, adApiCallbackSender: AdApiCallbackSender, session: Session, base64Wrapper: Base64Wrapper, eventTracker: EventTrackerExtensions, androidVersion: () -> Int = { Build.VERSION.SDK_INT }, )</ID>
    <ID>LongParameterList:CBHtmlWebViewProtocol.kt$CBHtmlWebViewProtocol$( context: Context, location: String, mtype: MediaTypeOM, adUnitParameters: String, fileCache: FileCache, networkRequestService: CBNetworkService?, uiPoster: UiPoster, templateProxy: CBTemplateProxy?, mediation: Mediation?, private val baseUrl: String, private val html: String?, private val infoIcon: InfoIcon, openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, adUnitRendererCallback: AdUnitRendererImpressionCallback, private val impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, private val scripts: List&lt;String>, private val eventTracker: EventTrackerExtensions, private val dispatcher: CoroutineDispatcher = Dispatchers.Main, private val cbWebViewFactory: (Context) -> CBWebView = { CBHtmlWebView(it) }, )</ID>
    <ID>LongParameterList:CBMraidWebViewProtocol.kt$CBMraidWebViewProtocol$( context: Context, location: String, mtype: MediaTypeOM, adUnitParameters: String, fileCache: FileCache, networkRequestService: CBNetworkService?, uiPoster: UiPoster, templateProxy: CBTemplateProxy?, mediation: Mediation?, private val templateHtml: String?, openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, adUnitRendererCallback: AdUnitRendererImpressionCallback, private val impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, private val nativeBridgeCommand: NativeBridgeCommand, private val eventTracker: EventTrackerExtensions, )</ID>
    <ID>LongParameterList:CBViewProtocol.kt$CBViewProtocol$( protected val context: Context, val location: String, private val adUnitMType: MediaTypeOM, val adTypeTraitsName: String, protected val uiPoster: UiPoster, private val fileCache: FileCache, private val networkRequestService: CBNetworkService?, protected val templateProxy: CBTemplateProxy?, private val mediation: Mediation?, private val templateHtml: String?, protected val openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, private val adUnitRendererCallback: AdUnitRendererImpressionCallback, private val webViewTimeoutInterface: WebViewTimeoutInterface, private val eventTracker: EventTrackerExtensions, private val impressionTrackerRequestFactory: ImpressionTrackerRequestFactory = ::ImpressionTrackerRequest, )</ID>
    <ID>LongParameterList:CommonWebViewBase.kt$CommonWebViewBase$( context: Context, html: String, callback: CustomWebViewInterface, baseExternalPathURL: String?, eventTracker: EventTracker, cbWebViewFactory: (Context) -> CBWebView = { CBWebView(it) }, cbWebChromeClientFactory: (View) -> WebChromeClient = { WebChromeClient() }, cbWebViewClientFactory: (CustomWebViewInterface, EventTracker) -> CustomWebViewClient = { cb, et -> CustomWebViewClient(cb, et) }, )</ID>
    <ID>LongParameterList:CompleteParamsModel.kt$CompleteParamsModel$( val location: String, val adId: String, val cgn: String, val rewardAmount: Int, val rewardCurrency: String, val videoPostion: Float?, val videoDuration: Float?, )</ID>
    <ID>LongParameterList:DependencyFactories.kt$( context: Context, databaseProvider: DatabaseProvider, cache: Cache, httpDataSourceFactory: HttpDataSource.Factory, listener: DownloadManager.Listener, threadPoolSize: Int = THREAD_POOL_SIZE, maxParallelDownloads: Int = MAX_PARALLEL_DOWNLOADS, )</ID>
    <ID>LongParameterList:EventTrackerImpl.kt$EventTrackerImpl$( private var config: Lazy&lt;TrackingConfig>, private var throttler: Lazy&lt;EventThrottler>, private var requestBodyBuilder: Lazy&lt;RequestBodyBuilder>, private var privacyApi: Lazy&lt;PrivacyApi>, private var environment: Lazy&lt;Environment>, private var trackingRequest: Lazy&lt;TrackingRequest>, private var trackingEventCache: Lazy&lt;TrackingEventCache>, )</ID>
    <ID>LongParameterList:HtmlWebViewBase.kt$HtmlWebViewBase$( context: Context, baseUrl: String, html: String, private val infoIcon: InfoIcon, eventTracker: EventTracker, private val callback: CustomWebViewInterface, private val impressionInterface: ImpressionInterface, private val dispatcher: CoroutineDispatcher = Dispatchers.Main, cbWebViewFactory: (Context) -> CBWebView = { CBHtmlWebView(it) }, private val cbImageDownloader: CBImageDownloader = CBImageDownloader(), )</ID>
    <ID>LongParameterList:ImpressionBuilder.kt$ImpressionBuilder$( appRequest: AppRequest, adUnit: AdUnit, location: String, templateHtml: String, callback: AdUnitRendererImpressionCallback, bannerView: ViewGroup?, impressionIntermediateCallback: ImpressionIntermediateCallback, impressionClickCallback: ImpressionClickCallback, viewProtocolBuilder: ImpressionViewProtocolBuilder, impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, nativeBridgeCommand: NativeBridgeCommand, )</ID>
    <ID>LongParameterList:ImpressionBuilder.kt$ImpressionBuilder$( appRequest: AppRequest, callback: AdUnitRendererImpressionCallback, bannerView: ViewGroup?, impressionIntermediateCallback: ImpressionIntermediateCallback, impressionClickCallback: ImpressionClickCallback, viewProtocolBuilder: ImpressionViewProtocolBuilder, impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, nativeBridgeCommand: NativeBridgeCommand, templateLoader: TemplateLoader, )</ID>
    <ID>LongParameterList:ImpressionBuilder.kt$ImpressionBuilder$( private val fileCache: FileCache, private val downloader: Downloader, private val urlResolver: UrlResolver, private val intentResolver: IntentResolver, private val adType: AdType, private val networkService: CBNetworkService, private val requestBodyBuilder: RequestBodyBuilder, private val mediation: Mediation?, private val measurementManager: OpenMeasurementManager, private val sdkBiddingTemplateParser: SDKBiddingTemplateParser, private val openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, private val impressionFactory: (ImpressionDependency, ViewGroup?) -> CBImpression, private val eventTracker: EventTrackerExtensions, private val endpointRepository: EndpointRepository, )</ID>
    <ID>LongParameterList:ImpressionClick.kt$ImpressionClick$( private val adUnit: AdUnit, private val urlResolver: UrlResolver, private val intentResolver: IntentResolver, private val clickRequest: ClickRequest, private val clickTracking: ClickTracking, private val mediaType: ImpressionMediaType, private val impressionCallback: ImpressionClickCallback, private val openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, private val adUnitRendererImpressionCallback: AdUnitRendererImpressionCallback, )</ID>
    <ID>LongParameterList:ImpressionDismiss.kt$ImpressionDismiss$( private val adUnit: AdUnit, private val location: String, private val adType: AdType, private val adUnitRendererImpressionCallback: AdUnitRendererImpressionCallback, private val impressionIntermediateCallback: ImpressionIntermediateCallback, private val appRequest: AppRequest, private val downloader: Downloader, private val openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, eventTracker: EventTrackerExtensions, )</ID>
    <ID>LongParameterList:ImpressionView.kt$ImpressionView$( private val appRequest: AppRequest, private val viewProtocol: CBViewProtocol, private val downloader: Downloader, bannerView: ViewGroup?, // e.g ChartboostBanner private val adUnitRendererImpressionCallback: AdUnitRendererImpressionCallback, private val impressionIntermediateCallback: ImpressionIntermediateCallback, private val impressionClickCallback: ImpressionClickCallback, )</ID>
    <ID>LongParameterList:ImpressionViewProtocolBuilder.kt$ImpressionViewProtocolBuilder$( location: String, adUnit: AdUnit, adTypeTraitsName: String, html: String, adUnitRendererImpressionCallback: AdUnitRendererImpressionCallback, impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, nativeBridgeCommand: NativeBridgeCommand, )</ID>
    <ID>LongParameterList:ImpressionViewProtocolBuilder.kt$ImpressionViewProtocolBuilder$( val context: Context, private val uiPoster: UiPoster, private val fileCache: FileCache, private val templateProxy: CBTemplateProxy, private val videoRepository: VideoRepository, private val mediation: Mediation?, private val networkService: CBNetworkService, private val openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, private val eventTracker: EventTrackerExtensions, )</ID>
    <ID>LongParameterList:InterstitiaApi.kt$InterstitialApi$( adUnitLoader: AdUnitLoader, adUnitRenderer: AdUnitRenderer, private val uiPoster: UiPoster, sdkConfig: AtomicReference&lt;SdkConfiguration>, backgroundExecutorService: ScheduledExecutorService, adApiCallbackSender: AdApiCallbackSender, session: Session, base64Wrapper: Base64Wrapper, eventTracker: EventTrackerExtensions, androidVersion: () -> Int = { Build.VERSION.SDK_INT }, )</ID>
    <ID>LongParameterList:MraidWebViewBase.kt$MraidWebViewBase$( context: Context, html: String, callback: CustomWebViewInterface, baseExternalPathURL: String?, nativeBridgeCommand: NativeBridgeCommand, eventTracker: EventTracker, cbWebViewFactory: (Context) -> CBWebView = { CBWebView(it) }, )</ID>
    <ID>LongParameterList:OpenMeasurementSessionBuilder.kt$OpenMeasurementSessionBuilder$( omidPartner: Partner?, omidJsServiceContent: String?, verificationScriptResourcesList: List&lt;VerificationScriptResource>, isValidationEnabled: Boolean, verificationListConfig: List&lt;VerificationModel>, mtype: MediaTypeOM, webview: CBWebView, )</ID>
    <ID>LongParameterList:OpenMeasurementSessionBuilder.kt$OpenMeasurementSessionBuilder$( webView: CBWebView, mtype: MediaTypeOM, omidPartner: Partner?, omidJsServiceContent: String?, verificationScriptResourcesList: List&lt;VerificationScriptResource>, isValidationEnabled: Boolean, verificationListConfig: List&lt;VerificationModel>, )</ID>
    <ID>LongParameterList:RequestBodyBuilderImpl.kt$RequestBodyBuilderImpl$( val context: Context, val identity: CBIdentity, val reachability: CBReachability, val sdkConfig: AtomicReference&lt;SdkConfiguration>, val sharedPreferences: SharedPreferences, val timeSource: TimeSource, private val carrierBuilder: CarrierBuilder, val session: Session, val privacyApi: PrivacyApi, val mediation: Mediation?, private val deviceBodyFieldsFactory: DeviceBodyFieldsFactory, )</ID>
    <ID>LongParameterList:RewardedApi.kt$RewardedApi$( adUnitLoader: AdUnitLoader, adUnitRenderer: AdUnitRenderer, private val uiPoster: UiPoster, sdkConfig: AtomicReference&lt;SdkConfiguration>, backgroundExecutorService: ScheduledExecutorService, adApiCallbackSender: AdApiCallbackSender, session: Session, base64Wrapper: Base64Wrapper, eventTracker: EventTrackerExtensions, androidVersion: () -> Int = { Build.VERSION.SDK_INT }, )</ID>
    <ID>LongParameterList:RichWebViewBase.kt$RichWebViewBase$( context: Context, html: String, callback: CustomWebViewInterface, baseExternalPathURL: String?, nativeBridgeCommand: NativeBridgeCommand, webViewCorsErrorHandler: WebViewCorsErrorHandler = WebViewCorsErrorHandler(), eventTracker: EventTracker, cbWebViewFactory: (Context) -> CBWebView = { CBWebView(it) }, )</ID>
    <ID>LongParameterList:SdkInitializer.kt$SdkInitializer$( private val context: Context, private val sharedPreferences: SharedPreferences, private val uiPoster: UiPoster, private val privacyApi: PrivacyApi, private val sdkConfig: AtomicReference&lt;SdkConfiguration>, private val prefetcher: Prefetcher, private val downloader: Downloader, private val session: Session, private val videoCachePolicy: VideoCachePolicy, private val videoRepository: Lazy&lt;VideoRepository>, private val initInstallRequest: InitInstallRequest, private val initConfigRequest: InitConfigRequest, private val reachability: CBReachability, private val providerInstallerHelper: ProviderInstallerHelper, private val identity: CBIdentity, private val openMeasurementManager: OpenMeasurementManager, )</ID>
    <ID>LongParameterList:TrackingEvent.kt$TrackingEvent$( val name: TrackingEventName, val message: String, val impressionAdType: String, val location: String, val mediation: Mediation?, val type: Type, var trackAd: TrackAd? = TrackAd(), var isLatencyEvent: Boolean = false, var shouldCalculateLatency: Boolean = true, var timestamp: Long = System.currentTimeMillis(), var latency: Float = 0f, var priority: Priority, )</ID>
    <ID>LongParameterList:UrlOpener.kt$( args: UrlArgs, context: Context = getApplicationContext(), intentResolver: IntentResolver = getIntentResolver(), uriParser: (String) -> Uri = Uri::parse, intentFactory: (Uri) -> Intent = { Intent(Intent.ACTION_VIEW, it) }, mainDispatcher: CoroutineDispatcher = Dispatchers.Main, )</ID>
    <ID>LongParameterList:VideoBase.kt$VideoBase$( context: Context, html: String, callback: CustomWebViewInterface, nativeBridgeCommand: NativeBridgeCommand, baseExternalPathURL: String?, private var surface: SurfaceView?, private var videoBackground: FrameLayout = FrameLayout(context), eventTracker: EventTracker, cbWebViewFactory: (Context) -> CBWebView = { CBWebView(it) }, )</ID>
    <ID>LongParameterList:VideoBuffer.kt$VideoBuffer$( videoAsset: VideoAsset, private val listener: VideoBufferListener, private var bufferUnlockThreshold: Float = DEFAULT_BUFFER_UNLOCK_THRESHOLD, tempHelper: TempFileDownloadHelper = TempFileDownloadHelper(), fileCache: FileCache?, private val coroutineDispatcher: CoroutineDispatcher = Dispatchers.Main, randomAccessFileFactory: RandomAccessFileFactory = ::createRandomAccessFile, )</ID>
    <ID>LongParameterList:VideoCachePolicy.kt$VideoCachePolicy$( var maxBytes: Long = 104857600, // 100mb var maxUnitsPerTimeWindow: Int = 10, var maxUnitsPerTimeWindowCellular: Int = 8, var timeWindow: Long = 18000, // 5h var timeWindowCellular: Long = 15000, var ttl: Long = 7200, // 2h var bufferSize: Percentage = 3, // TODO Never used val reachability: CBReachability?, )</ID>
    <ID>LongParameterList:VideoProtocol.kt$VideoProtocol$( context: Context, location: String, mtype: MediaTypeOM, adUnitParameters: String, uiPoster: UiPoster, private val fileCache: FileCache, templateProxy: CBTemplateProxy, private val videoRepository: VideoRepository, private val videoFilename: String, private val mediation: Mediation?, private val adsVideoPlayerFactory: AdsVideoPlayerFactory, networkService: CBNetworkService, private val templateHtml: String, openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, adUnitRendererImpressionCallback: AdUnitRendererImpressionCallback, private val impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, private val nativeBridgeCommand: NativeBridgeCommand, private val eventTracker: EventTrackerExtensions, private val cbWebViewFactory: (Context) -> CBWebView = { CBWebView(it) }, )</ID>
    <ID>LongParameterList:VideoProtocol.kt$VideoProtocol.Companion$( context: Context, location: String, mtype: MediaTypeOM, adUnitParameters: String, uiPoster: UiPoster, fileCache: FileCache, templateProxy: CBTemplateProxy, videoRepository: VideoRepository, videoFilename: String, mediation: Mediation?, adsVideoPlayerFactory: AdsVideoPlayerFactory, networkService: CBNetworkService, templateHtml: String, openMeasurementImpressionCallback: OpenMeasurementImpressionCallback, adUnitRendererImpressionCallback: AdUnitRendererImpressionCallback, impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, nativeBridgeCommand: NativeBridgeCommand, eventTracker: EventTrackerExtensions, )</ID>
    <ID>LongParameterList:VideoRepositoryMediaPlayer.kt$VideoRepositoryMediaPlayer$( url: String, filename: String, showImmediately: Boolean, callback: AdUnitVideoPrecacheTemp?, isDownloadingOrDownloaded: Boolean, dest: File?, )</ID>
    <ID>LongParameterList:VisibilityTracker.kt$VisibilityTracker$( context: Context, private val trackedView: View, private val rootView: View, private val minVisibleDips: Int, private val minVisibleMs: Int, private val visibilityCheckIntervalMs: Long, private val traversalLimit: Int, )</ID>
    <ID>LoopWithTooManyJumpStatements:VisibilityTracker.kt$VisibilityTracker$while (isActive) { if (isVisibilityTracked) { break } // Check to see if the tracked view is within the bounds of the root view. if (isViewVisible()) { // Start the timer for duration requirement if it hasn't already. startTimeMs = startTimeMs ?: SystemClock.uptimeMillis() if (hasRequiredTimeElapsed()) { visibilityTrackerListener?.onVisibilityThresholdMet() isVisibilityTracked = true break } } withContext(IO) { delay(visibilityCheckIntervalMs) } }</ID>
    <ID>MagicNumber:AdUnitParser.kt$MediaTypeOM.AUDIO$3</ID>
    <ID>MagicNumber:AdUnitParser.kt$MediaTypeOM.NATIVE$4</ID>
    <ID>MagicNumber:AdsMediaPlayer.kt$AdsMediaPlayer$0.05</ID>
    <ID>MagicNumber:Analytics.kt$Analytics.LevelType.CHARACTER_LEVEL$3</ID>
    <ID>MagicNumber:Analytics.kt$Analytics.LevelType.OTHER_NONSEQUENTIAL$5</ID>
    <ID>MagicNumber:Analytics.kt$Analytics.LevelType.OTHER_SEQUENTIAL$4</ID>
    <ID>MagicNumber:Banner.kt$Banner.BannerSize.LEADERBOARD$728</ID>
    <ID>MagicNumber:Banner.kt$Banner.BannerSize.LEADERBOARD$90</ID>
    <ID>MagicNumber:Banner.kt$Banner.BannerSize.MEDIUM$250</ID>
    <ID>MagicNumber:Banner.kt$Banner.BannerSize.MEDIUM$300</ID>
    <ID>MagicNumber:Banner.kt$Banner.BannerSize.STANDARD$320</ID>
    <ID>MagicNumber:Banner.kt$Banner.BannerSize.STANDARD$50</ID>
    <ID>MagicNumber:CBImageDownloader.kt$CBImageDownloader$1000L</ID>
    <ID>MagicNumber:CBViewProtocol.kt$CBViewProtocol$1000</ID>
    <ID>MagicNumber:CBViewProtocol.kt$CBViewProtocol$3</ID>
    <ID>MagicNumber:CBViewProtocol.kt$CBViewProtocol$4</ID>
    <ID>MagicNumber:CacheError.kt$CacheError.Code.ASSET_DOWNLOAD_FAILURE$16</ID>
    <ID>MagicNumber:CacheError.kt$CacheError.Code.BANNER_DISABLED$36</ID>
    <ID>MagicNumber:CacheError.kt$CacheError.Code.BANNER_VIEW_IS_DETACHED$37</ID>
    <ID>MagicNumber:CacheError.kt$CacheError.Code.NETWORK_FAILURE$5</ID>
    <ID>MagicNumber:CacheError.kt$CacheError.Code.NO_AD_FOUND$6</ID>
    <ID>MagicNumber:CacheError.kt$CacheError.Code.SERVER_ERROR$8</ID>
    <ID>MagicNumber:CacheError.kt$CacheError.Code.SESSION_NOT_STARTED$7</ID>
    <ID>MagicNumber:ChartboostApi.kt$ChartboostApi$100</ID>
    <ID>MagicNumber:ChartboostDSPHelper.kt$ChartboostDSPHelper$10</ID>
    <ID>MagicNumber:ChartboostDSPHelper.kt$ChartboostDSPHelper$4</ID>
    <ID>MagicNumber:ClickRequest.kt$ClickRequest$1000</ID>
    <ID>MagicNumber:CompleteRequest.kt$CompleteRequest$1000</ID>
    <ID>MagicNumber:Custom.kt$Custom$99</ID>
    <ID>MagicNumber:Environment.kt$Environment$100</ID>
    <ID>MagicNumber:Environment.kt$Environment$1048576L</ID>
    <ID>MagicNumber:Environment.kt$Environment.AudioOutputType.OTHER$3</ID>
    <ID>MagicNumber:EventThrottler.kt$EventThrottler$1000</ID>
    <ID>MagicNumber:EventTrackerImpl.kt$EventTrackerImpl$1000f</ID>
    <ID>MagicNumber:ExoPlayerDownloadManagerImpl.kt$ExoPlayerDownloadManagerImpl$100f</ID>
    <ID>MagicNumber:ImpressionMediaType.kt$ImpressionMediaType.BANNER$3</ID>
    <ID>MagicNumber:ImpressionMediaType.kt$ImpressionMediaType.NONE$4</ID>
    <ID>MagicNumber:ImpressionState.kt$ImpressionState.CACHED$3</ID>
    <ID>MagicNumber:ImpressionState.kt$ImpressionState.DISMISSING$4</ID>
    <ID>MagicNumber:ImpressionState.kt$ImpressionState.NONE$5</ID>
    <ID>MagicNumber:InfoIcon.kt$InfoIcon.Position.BOTTOM_RIGHT$3</ID>
    <ID>MagicNumber:NativeBridgeCommand.kt$NativeBridgeCommand$1000</ID>
    <ID>MagicNumber:NetworkType.kt$NetworkType.CELLULAR_2G$4</ID>
    <ID>MagicNumber:NetworkType.kt$NetworkType.CELLULAR_3G$5</ID>
    <ID>MagicNumber:NetworkType.kt$NetworkType.CELLULAR_4G$6</ID>
    <ID>MagicNumber:NetworkType.kt$NetworkType.CELLULAR_5G$7</ID>
    <ID>MagicNumber:NetworkType.kt$NetworkType.CELLULAR_UNKNOWN$3</ID>
    <ID>MagicNumber:OrientationHelper.kt$0xFF</ID>
    <ID>MagicNumber:PlayerState.kt$PlayerState.PAUSED$3</ID>
    <ID>MagicNumber:Priority.kt$Priority.LOW$3</ID>
    <ID>MagicNumber:SdkInitializer.kt$SdkInitializer$300</ID>
    <ID>MagicNumber:ShowError.kt$ShowError.Code.AD_ALREADY_VISIBLE$8</ID>
    <ID>MagicNumber:ShowError.kt$ShowError.Code.BANNER_DISABLED$36</ID>
    <ID>MagicNumber:ShowError.kt$ShowError.Code.BANNER_VIEW_IS_DETACHED$37</ID>
    <ID>MagicNumber:ShowError.kt$ShowError.Code.INTERNET_UNAVAILABLE$25</ID>
    <ID>MagicNumber:ShowError.kt$ShowError.Code.NO_CACHED_AD$34</ID>
    <ID>MagicNumber:ShowError.kt$ShowError.Code.PRESENTATION_FAILURE$33</ID>
    <ID>MagicNumber:ShowError.kt$ShowError.Code.SESSION_NOT_STARTED$7</ID>
    <ID>MagicNumber:StartError.kt$StartError.Code.INTERNAL$3</ID>
    <ID>MagicNumber:SystemUtils.kt$1000</ID>
    <ID>MagicNumber:TrackAd.kt$TrackAd$20</ID>
    <ID>MagicNumber:UrlRedirect.kt$HttpStatus.REDIRECTION_END$399</ID>
    <ID>MagicNumber:UrlRedirect.kt$HttpStatus.REDIRECTION_START$300</ID>
    <ID>MagicNumber:UrlRedirect.kt$HttpStatus.REQUEST_SUCCESS_END$299</ID>
    <ID>MagicNumber:UrlRedirect.kt$HttpStatus.REQUEST_SUCCESS_START$200</ID>
    <ID>MagicNumber:VideoBuffer.kt$VideoBuffer$0.0075f</ID>
    <ID>MagicNumber:VideoBuffer.kt$VideoBuffer$1000f</ID>
    <ID>MagicNumber:VideoBuffer.kt$VideoBuffer$60000f</ID>
    <ID>MagicNumber:VideoBuffer.kt$VideoBuffer$8</ID>
    <ID>MagicNumber:VideoCachePolicy.kt$VideoCachePolicy$1000</ID>
    <ID>MagicNumber:VideoProtocol.kt$VideoProtocol$1000f</ID>
    <ID>MatchingDeclarationName:DependencyContainerTest.kt$DependencyContainerInternalImplTest</ID>
    <ID>MatchingDeclarationName:ImpressionClicakble.kt$ImpressionClickable</ID>
    <ID>MatchingDeclarationName:ImpressionContract.kt$ImpressionStateInterface</ID>
    <ID>MatchingDeclarationName:InterstitiaApi.kt$InterstitialApi : AdApi</ID>
    <ID>MatchingDeclarationName:SdkNotInitializedException.kt$ChartboostNotInitializedException : RuntimeException</ID>
    <ID>MatchingDeclarationName:UrlOpenerException.kt$UrlOpenerFallbackReason : ThrowableSerializable</ID>
    <ID>MaxLineLength:Ad.kt$Ad$*</ID>
    <ID>MaxLineLength:AdCallback.kt$AdCallback$*</ID>
    <ID>MaxLineLength:AdLoaderImplTest.kt$AdLoaderImplTest$"{\"id\": \"cac2faea23eeecc135bf4e678116c0c339fa915f\", \"seatbid\": [{\"bid\": [{\"id\": \"d46baee9d6b7c20f2f8fcca5d9a96244329fbbe3-1\", \"impid\": \"cac2faea23eeecc135bf4e678116c0c339fa915f\", \"price\": 0.07, \"adm\": \"PGhlYWQ+CjwvaGVhZD4KPGJvZHk+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9jaGFydGJvb3N0LmFhcmtpLm5ldC9ydGIvcGl4ZWw/YXVjdGlvbl9pZD1kNDZiYWVlOWQ2YjdjMjBmMmY4ZmNjYTVkOWE5NjI0NDMyOWZiYmUzJmF1Y3Rpb25fY3VycmVuY3k9VVNEIiB3aWR0aD0iMSIgaGVpZ2h0PSIxIi8+PGltZyBzcmM9Imh0dHBzOi8vaW1wLmNvbnRyb2wua29jaGF2YS5jb20vdHJhY2svaW1wcmVzc2lvbj9jYW1wYWlnbl9pZD1rb3NvbGl0YWlyZS1hbmRyb2lkNTRjOTgwNmY4MTYyNGI2MTYwM2ZiYTM0ZDQmbmV0d29ya19pZD0zNCZzaXRlX2lkPTVhNGU3OTc1MzhhNWYwMGNmNjA3MzhkNiZwbGF0Zm9ybT1hbmRyb2lkJmRldmljZV9pZF90eXBlPWFkaWQmZGV2aWNlX2lkPTgyOGExMzQyLTdjMTItNDAxMS1hMzMwLTQ5ZTc2NmU1ZmIxZCZhYXJraV9pbXBfaWQ9Y2hhcnRib29zdCUzQWQ0NmJhZWU5ZDZiN2MyMGYyZjhmY2NhNWQ5YTk2MjQ0MzI5ZmJiZTMmYXBwX2lkPTQwMTFFMDUyQjFEOTlBQTlEQSIgd2lkdGg9IjEiIGhlaWdodD0iMSIvPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGlkPSJhYXJraV82YjVjOGJkODhmY2Y1OTUxZGEzY2Q3YmYwNjkxNzY5OCI+CihmdW5jdGlvbigpIHsKdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLAogICAgb3V0U2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FhcmtpXzZiNWM4YmQ4OGZjZjU5NTFkYTNjZDdiZjA2OTE3Njk4Jyk7Cgp0YWcuaWQgPSAnbW9ic3BpcmUtYWQtdGFnJzsKdGFnLnNyYyA9ICdodHRwczovL3JtLmFhcmtpLm5ldC92MS9hZHMvNmI1YzhiZDg4ZmNmNTk1MWRhM2NkN2JmMDY5MTc2OTgvYWQuanM/b3RzPScgKyAobmV3IERhdGUoKSkuZ2V0VGltZSgpKycmc2Vzc2lvbklkPWQ0NmJhZWU5ZDZiN2MyMGYyZjhmY2NhNWQ5YTk2MjQ0MzI5ZmJiZTMmbmV4dD1odHRwcyUzQSUyRiUyRmNoYXJ0Ym9vc3QuYWFya2kubmV0JTJGcnRiJTJGY2xpY2slM0ZhdWN0aW9uX2lkJTNEZDQ2YmFlZTlkNmI3YzIwZjJmOGZjY2E1ZDlhOTYyNDQzMjlmYmJlMyUyNmF1Y3Rpb25fY3VycmVuY3klM0RVU0QlMjZvZnIlM0Q4MzIyNSUyNmFkdmVydGlzaW5nX2lkJTNEODI4YTEzNDItN2MxMi00MDExLWEzMzAtNDllNzY2ZTVmYjFkJTI2ZmxpZ2h0JTNEJTdCYXJnX2ZsaWdodCU3RCUyNmNyZWF0aXZlJTNEJTdCYXJnX3RyYWNraW5nS2V5JTdEJTI2Y3YlM0QlN0JhcmdfY3YlN0QlMjZmbGlnaHRfcnVsZSUzRCU3QmFyZ19mbGlnaHRfcnVsZV9pZHMlN0Qmc2VjdXJlPXkmYWR2ZXJ0aXNpbmdfaWQ9ODI4YTEzNDI3YzEyNDAxMWEzMzA0OWU3NjZlNWZiMWQmcHJlX2xhbmc9RW5nbGlzaCZjaGFubmVsPWRzcF84MzIyNSZqc3RhZz15JmNiZD01JzsKdGFnLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKCm91dFNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YWcsIG91dFNjcmlwdCk7Cn0pKCk7Cjwvc2NyaXB0Pgo8L2JvZHk+\", \"adomain\": [\"mobilityware.com/solitaire.php\"], \"bundle\": \"com.mobilityware.solitaire\", \"iurl\": \"https://spire.aarki.net/v1/ads/6b5c8bd88fcf5951da3cd7bf06917698/v1-23d6fbb63af625de95456601c7cfd868/screenshot.jpeg\", \"cid\": \"83225\", \"crid\": \"83225:23d6fbb63af625de95456601c7cfd868\", \"cat\": [\"IAB9-30\"], \"w\": 320, \"h\": 480, \"ext\": {\"prebid\": {\"targeting\": {\"hb_bidder\": \"chartboost\", \"hb_bidder_chartboost\": \"chartboost\", \"hb_creative_loadtype\": \"html\", \"hb_env\": \"mobile-app\", \"hb_env_chartboost\": \"mobile-app\", \"hb_pb\": \"0.00\", \"hb_pb_chartboost\": \"0.00\", \"hb_size\": \"320x480\", \"hb_size_chartboost\": \"320x480\"}, \"type\": \"video\"}, \"bidder\": {\"imptrackers\": [\"https://chartboost.aarki.net/rtb/win?auction_id=d46baee9d6b7c20f2f8fcca5d9a96244329fbbe3&amp;auction_price=0.115&amp;auction_currency=USD\"], \"crtype\": \"HTML5\", \"priceType\": 2, \"adId\": \"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\", \"cgn\": \"HH9rcO14P26p1Hq3x7vyLrpLzjGnD9lNJnjTbL4M3xlqM9zrWxnLv5xSnYGpAUsJZjaL/AZPgQUgPRaNTtt8MITM9U5/VxHE+k+9EzUlKZKMOs91+jReUucwyBXph1TyhrwMSbQefSBoW7ARLPTLEA9m3OhxKb4huQ3dXjuua58scSNoGiKR4NvYJwXJdoveC6GN7rJv3sZGsu6kpQ1JswtBR8AiW/9xCbM3uB6teVQOb3YRy5xQzYBFyAKDv97J/qvc2g1w/W1EYOsG1Vp8r3bGltkiVJt/K4OC5zyhhkYNLpyHEonXsYeZSs52IE6uC9tMNeNhx2crxT2+kOymge0UUZ7njqqBX+UgBcDwo2Cftxa8l/hEtKmIN9bP6URhMZ5fq/50Gfaq9WKo+erC+l9Zg0CNyWRDtHmnaOyHCvMhqBmPHjJiKxBA32nusK2xvc7cJvDsKPq+hd0fcwUFD2rjrL7ZmxUVSGCUjterxOw5oDct1RKiyxOgfXa3dN5sW1RcH0D+R/JIxtH841W5Mv8/5aC7yK9zMqTGLQfG9e5jvR3hIbLHitWmsvJpBpZfTkA4MOzB/f2uzBI89MiovI6qLAc+cDOO3mYrWdP9DBeEchCBddMo6GFkcXfEQ1hMkEyDK1A6zSbb2SmIVt4fQM5MtDfQJQFZlPXcy+ms6XSdhJDkUFkZ3t9jpLXiabw0M7BkceZGk6l854TPI780WjJIIA==\", \"template\": \"https://t.chartboost.com/base_templates/html/mraid-iframe-open-df82555530.html\", \"videoUrl\": \"https://t.chartboost.com/cbvideo/test.mp4\", \"trackingId\": \"23a79da8-c861-418c-b67c-8d44a108a069\"}}}], \"seat\": \"chartboost\"}], \"ext\": {\"debug\": {\"httpcalls\": {\"chartboost\": [{\"uri\": \"http://internal-demandaggregator-production-elb-1948891915.us-east-1.elb.amazonaws.com:8080/auction/helium\", \"requestbody\": \"{\\\"regs\\\":{\\\"coppa\\\":0,\\\"ext\\\":{\\\"gdpr\\\":0}},\\\"id\\\":\\\"cac2faea23eeecc135bf4e678116c0c339fa915f\\\",\\\"imp\\\":[{\\\"id\\\":\\\"cac2faea23eeecc135bf4e678116c0c339fa915f\\\",\\\"banner\\\":{\\\"w\\\":1080,\\\"h\\\":2076,\\\"btype\\\":[4],\\\"battr\\\":[1,2],\\\"pos\\\":7,\\\"topframe\\\":1,\\\"ext\\\":{\\\"placementtype\\\":\\\"interstitial\\\",\\\"playableonly\\\":false,\\\"allowscustomclosebutton\\\":true}},\\\"video\\\":{\\\"mimes\\\":[\\\"video\\\\\\\\/mp4\\\"],\\\"minduration\\\":5,\\\"maxduration\\\":30,\\\"protocols\\\":[1,2,3],\\\"w\\\":1080,\\\"h\\\":2076,\\\"placement\\\":5,\\\"linearity\\\":1,\\\"skip\\\":1,\\\"battr\\\":[1,2],\\\"delivery\\\":[1,2],\\\"pos\\\":7,\\\"companiontype\\\":[1,3],\\\"ext\\\":{\\\"placementtype\\\":\\\"interstitial\\\"}},\\\"displaymanager\\\":\\\"Chartboost-Android-SDK\\\",\\\"displaymanagerver\\\":\\\"7.3.0\\\",\\\"instl\\\":1,\\\"tagid\\\":\\\"CBInterstitial\\\",\\\"bidfloor\\\":0.1,\\\"secure\\\":1,\\\"ext\\\":{\\\"viewabilityExtensions\\\":null}}],\\\"app\\\":{\\\"id\\\":\\\"5a4e797538a5f00cf60738d6\\\",\\\"name\\\":\\\"Super Mario Run\\\",\\\"bundle\\\":\\\"com.chartboost.heliumsdk.sampleapp\\\",\\\"storeurl\\\":\\\"market://details?id=com.nintendo.zara\\\",\\\"publisher\\\":{\\\"id\\\":\\\"596e66c543150f7e014a6660\\\",\\\"name\\\":\\\"Nintendo Co., Ltd.\\\"}},\\\"device\\\":{\\\"ua\\\":\\\"Chartboost-Android-SDK 7.3.0\\\",\\\"geo\\\":{\\\"lat\\\":40.5005,\\\"lon\\\":-3.66739,\\\"type\\\":2,\\\"country\\\":\\\"ES\\\",\\\"region\\\":\\\"Madrid\\\",\\\"city\\\":\\\"Madrid\\\",\\\"zip\\\":\\\"28001\\\"},\\\"lmt\\\":1,\\\"ip\\\":\\\"88.6.2.104\\\",\\\"devicetype\\\":4,\\\"make\\\":\\\"samsung\\\",\\\"model\\\":\\\"SM-G950F\\\",\\\"os\\\":\\\"Android\\\",\\\"osv\\\":\\\"8.0.0\\\",\\\"h\\\":2076,\\\"w\\\":1080,\\\"pxratio\\\":480,\\\"language\\\":\\\"English\\\",\\\"connectiontype\\\":2,\\\"ifa\\\":\\\"828a1342-7c12-4011-a330-49e766e5fb1d\\\"},\\\"user\\\":{\\\"geo\\\":{\\\"lat\\\":40.5005,\\\"lon\\\":-3.66739,\\\"type\\\":2,\\\"country\\\":\\\"ES\\\",\\\"region\\\":\\\"Madrid\\\",\\\"city\\\":\\\"Madrid\\\",\\\"zip\\\":\\\"28001\\\"}},\\\"test\\\":1,\\\"at\\\":1,\\\"tmax\\\":750,\\\"cur\\\":[\\\"USD\\\"],\\\"ext\\\":{\\\"prebid\\\":{\\\"targeting\\\":{}}}}\", \"responsebody\": \"{\\\"id\\\":\\\"cac2faea23eeecc135bf4e678116c0c339fa915f\\\",\\\"seatbid\\\":[{\\\"bid\\\":[{\\\"id\\\":\\\"d46baee9d6b7c20f2f8fcca5d9a96244329fbbe3-1\\\",\\\"impid\\\":\\\"cac2faea23eeecc135bf4e678116c0c339fa915f\\\",\\\"price\\\":0.07,\\\"adm\\\":\\\"PGhlYWQ+CjwvaGVhZD4KPGJvZHk+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9jaGFydGJvb3N0LmFhcmtpLm5ldC9ydGIvcGl4ZWw/YXVjdGlvbl9pZD1kNDZiYWVlOWQ2YjdjMjBmMmY4ZmNjYTVkOWE5NjI0NDMyOWZiYmUzJmF1Y3Rpb25fY3VycmVuY3k9VVNEIiB3aWR0aD0iMSIgaGVpZ2h0PSIxIi8+PGltZyBzcmM9Imh0dHBzOi8vaW1wLmNvbnRyb2wua29jaGF2YS5jb20vdHJhY2svaW1wcmVzc2lvbj9jYW1wYWlnbl9pZD1rb3NvbGl0YWlyZS1hbmRyb2lkNTRjOTgwNmY4MTYyNGI2MTYwM2ZiYTM0ZDQmbmV0d29ya19pZD0zNCZzaXRlX2lkPTVhNGU3OTc1MzhhNWYwMGNmNjA3MzhkNiZwbGF0Zm9ybT1hbmRyb2lkJmRldmljZV9pZF90eXBlPWFkaWQmZGV2aWNlX2lkPTgyOGExMzQyLTdjMTItNDAxMS1hMzMwLTQ5ZTc2NmU1ZmIxZCZhYXJraV9pbXBfaWQ9Y2hhcnRib29zdCUzQWQ0NmJhZWU5ZDZiN2MyMGYyZjhmY2NhNWQ5YTk2MjQ0MzI5ZmJiZTMmYXBwX2lkPTQwMTFFMDUyQjFEOTlBQTlEQSIgd2lkdGg9IjEiIGhlaWdodD0iMSIvPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGlkPSJhYXJraV82YjVjOGJkODhmY2Y1OTUxZGEzY2Q3YmYwNjkxNzY5OCI+CihmdW5jdGlvbigpIHsKdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLAogICAgb3V0U2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FhcmtpXzZiNWM4YmQ4OGZjZjU5NTFkYTNjZDdiZjA2OTE3Njk4Jyk7Cgp0YWcuaWQgPSAnbW9ic3BpcmUtYWQtdGFnJzsKdGFnLnNyYyA9ICdodHRwczovL3JtLmFhcmtpLm5ldC92MS9hZHMvNmI1YzhiZDg4ZmNmNTk1MWRhM2NkN2JmMDY5MTc2OTgvYWQuanM/b3RzPScgKyAobmV3IERhdGUoKSkuZ2V0VGltZSgpKycmc2Vzc2lvbklkPWQ0NmJhZWU5ZDZiN2MyMGYyZjhmY2NhNWQ5YTk2MjQ0MzI5ZmJiZTMmbmV4dD1odHRwcyUzQSUyRiUyRmNoYXJ0Ym9vc3QuYWFya2kubmV0JTJGcnRiJTJGY2xpY2slM0ZhdWN0aW9uX2lkJTNEZDQ2YmFlZTlkNmI3YzIwZjJmOGZjY2E1ZDlhOTYyNDQzMjlmYmJlMyUyNmF1Y3Rpb25fY3VycmVuY3klM0RVU0QlMjZvZnIlM0Q4MzIyNSUyNmFkdmVydGlzaW5nX2lkJTNEODI4YTEzNDItN2MxMi00MDExLWEzMzAtNDllNzY2ZTVmYjFkJTI2ZmxpZ2h0JTNEJTdCYXJnX2ZsaWdodCU3RCUyNmNyZWF0aXZlJTNEJTdCYXJnX3RyYWNraW5nS2V5JTdEJTI2Y3YlM0QlN0JhcmdfY3YlN0QlMjZmbGlnaHRfcnVsZSUzRCU3QmFyZ19mbGlnaHRfcnVsZV9pZHMlN0Qmc2VjdXJlPXkmYWR2ZXJ0aXNpbmdfaWQ9ODI4YTEzNDI3YzEyNDAxMWEzMzA0OWU3NjZlNWZiMWQmcHJlX2xhbmc9RW5nbGlzaCZjaGFubmVsPWRzcF84MzIyNSZqc3RhZz15JmNiZD01JzsKdGFnLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKCm91dFNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YWcsIG91dFNjcmlwdCk7Cn0pKCk7Cjwvc2NyaXB0Pgo8L2JvZHk+\\\",\\\"adomain\\\":[\\\"mobilityware.com/solitaire.php\\\"],\\\"bundle\\\":\\\"com.mobilityware.solitaire\\\",\\\"iurl\\\":\\\"https://spire.aarki.net/v1/ads/6b5c8bd88fcf5951da3cd7bf06917698/v1-23d6fbb63af625de95456601c7cfd868/screenshot.jpeg\\\",\\\"cid\\\":\\\"83225\\\",\\\"crid\\\":\\\"83225:23d6fbb63af625de95456601c7cfd868\\\",\\\"cat\\\":[\\\"IAB9-30\\\"],\\\"attr\\\":[],\\\"h\\\":480,\\\"w\\\":320,\\\"ext\\\":{\\\"imptrackers\\\":[\\\"https://chartboost.aarki.net/rtb/win?auction_id=d46baee9d6b7c20f2f8fcca5d9a96244329fbbe3&amp;auction_price=0.115&amp;auction_currency=USD\\\"],\\\"crtype\\\":\\\"HTML5\\\",\\\"priceType\\\":2,\\\"adId\\\":\\\"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\\\",\\\"cgn\\\":\\\"HH9rcO14P26p1Hq3x7vyLrpLzjGnD9lNJnjTbL4M3xlqM9zrWxnLv5xSnYGpAUsJZjaL/AZPgQUgPRaNTtt8MITM9U5/VxHE+k+9EzUlKZKMOs91+jReUucwyBXph1TyhrwMSbQefSBoW7ARLPTLEA9m3OhxKb4huQ3dXjuua58scSNoGiKR4NvYJwXJdoveC6GN7rJv3sZGsu6kpQ1JswtBR8AiW/9xCbM3uB6teVQOb3YRy5xQzYBFyAKDv97J/qvc2g1w/W1EYOsG1Vp8r3bGltkiVJt/K4OC5zyhhkYNLpyHEonXsYeZSs52IE6uC9tMNeNhx2crxT2+kOymge0UUZ7njqqBX+UgBcDwo2Cftxa8l/hEtKmIN9bP6URhMZ5fq/50Gfaq9WKo+erC+l9Zg0CNyWRDtHmnaOyHCvMhqBmPHjJiKxBA32nusK2xvc7cJvDsKPq+hd0fcwUFD2rjrL7ZmxUVSGCUjterxOw5oDct1RKiyxOgfXa3dN5sW1RcH0D+R/JIxtH841W5Mv8/5aC7yK9zMqTGLQfG9e5jvR3hIbLHitWmsvJpBpZfTkA4MOzB/f2uzBI89MiovI6qLAc+cDOO3mYrWdP9DBeEchCBddMo6GFkcXfEQ1hMkEyDK1A6zSbb2SmIVt4fQM5MtDfQJQFZlPXcy+ms6XSdhJDkUFkZ3t9jpLXiabw0M7BkceZGk6l854TPI780WjJIIA==\\\",\\\"template\\\":\\\"https://t.chartboost.com/base_templates/html/mraid-iframe-open-df82555530.html\\\",\\\"trackingId\\\":\\\"23a79da8-c861-418c-b67c-8d44a108a069\\\"}}],\\\"seat\\\":\\\"Aarki\\\"}],\\\"cur\\\":\\\"USD\\\"}\", \"status\": 200}]}, \"resolvedrequest\": {\"id\": \"cac2faea23eeecc135bf4e678116c0c339fa915f\", \"imp\": [{\"id\": \"cac2faea23eeecc135bf4e678116c0c339fa915f\", \"banner\": {\"w\": 1080, \"h\": 2076, \"btype\": [4], \"battr\": [1, 2], \"pos\": 7, \"topframe\": 1, \"ext\": {\"placementtype\": \"interstitial\", \"playableonly\": false, \"allowscustomclosebutton\": true}}, \"video\": {\"mimes\": [\"video\\\\/mp4\"], \"minduration\": 5, \"maxduration\": 30, \"protocols\": [1, 2, 3], \"w\": 1080, \"h\": 2076, \"placement\": 5, \"linearity\": 1, \"skip\": 1, \"battr\": [1, 2], \"delivery\": [1, 2], \"pos\": 7, \"companiontype\": [1, 3], \"ext\": {\"placementtype\": \"interstitial\"}}, \"displaymanager\": \"Chartboost-Android-SDK\", \"displaymanagerver\": \"7.3.0\", \"instl\": 1, \"tagid\": \"CBInterstitial\", \"bidfloor\": 0.1, \"secure\": 1, \"ext\": {\"chartboost\": {\"app_id\": \"5a4e797538a5f00cf60738d6\", \"app_signature\": \"d29d75ce6213c746ba986f464e2b4a510be40399\"}}}], \"app\": {\"id\": \"5a4e797538a5f00cf60738d6\", \"name\": \"Super Mario Run\", \"bundle\": \"com.chartboost.heliumsdk.sampleapp\", \"storeurl\": \"market://details?id=com.nintendo.zara\", \"publisher\": {\"id\": \"596e66c543150f7e014a6660\", \"name\": \"Nintendo Co., Ltd.\"}}, \"device\": {\"ua\": \"Chartboost-Android-SDK 7.3.0\", \"geo\": {\"lat\": 40.5005, \"lon\": -3.66739, \"type\": 2, \"country\": \"ES\", \"region\": \"Madrid\", \"city\": \"Madrid\", \"zip\": \"28001\"}, \"lmt\": 1, \"ip\": \"88.6.2.104\", \"devicetype\": 4, \"make\": \"samsung\", \"model\": \"SM-G950F\", \"os\": \"Android\", \"osv\": \"8.0.0\", \"h\": 2076, \"w\": 1080, \"pxratio\": 480, \"language\": \"English\", \"connectiontype\": 2, \"ifa\": \"828a1342-7c12-4011-a330-49e766e5fb1d\"}, \"user\": {\"geo\": {\"lat\": 40.5005, \"lon\": -3.66739, \"type\": 2, \"country\": \"ES\", \"region\": \"Madrid\", \"city\": \"Madrid\", \"zip\": \"28001\"}}, \"test\": 1, \"at\": 1, \"tmax\": 750, \"cur\": [\"USD\"], \"regs\": {\"ext\": {\"gdpr\": 0}}, \"ext\": {\"prebid\": {\"targeting\": {}}}}}, \"responsetimemillis\": {\"chartboost\": 451}}}"</ID>
    <ID>MaxLineLength:AdUnitLoaderTest.kt$AdUnitLoaderTest$"\t\t\t\"adm\": \"PGRpdiBpZD0iY29udGFpbmVyIiBzdHlsZT0id2lkdGg6MTAwJTsgaGVpZ2h0OjEwMCU7IGJhY2tncm91bmQtY29sb3I6IzAwMDAwMDsiPgogIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmNoYXJ0Ym9vc3QuY29tIj4KICAgIDxpbWcKICAgICAgc3JjPSJodHRwczovL2EuY2hhcnRib29zdC5jb20vYmlkZGVyL2NyZWF0aXZlcy9kZWZhdWx0L2Jhbm5lci9hZC5qcGciCiAgICAgIHN0eWxlPSJkaXNwbGF5OmJsb2NrO2hlaWdodDoxMDAlO3dpZHRoOjEwMCUiCiAgICAgIGhlaWdodD0iNTAiCiAgICAgIHdpZHRoPSIzMjAiCiAgICAvPgo8L2E+CjwvZGl2Pg==\",\n"</ID>
    <ID>MaxLineLength:AdUnitLoaderTest.kt$AdUnitLoaderTest$"\t\t\t\t\"params\": \"{\\\"encoding\\\": \\\"base64\\\",\\\"isNativePlayer\\\": \\\"true\\\", \\\"ShowCloseButton\\\": \\\"true\\\", \\\"AdType\\\": \\\"Interstitial\\\"}\",\n"</ID>
    <ID>MaxLineLength:AdUnitLoaderTest.kt$AdUnitLoaderTest$"\t\t\t\t\"template\": \"https://t.chartboost.com/base_templates/html/mraid-iframe-open-df82555530.html\",\n"</ID>
    <ID>MaxLineLength:AdUnitLoaderTest.kt$AdUnitLoaderTest$"\t\t\t\t\"videoUrl\": \"https://d1gnoa8d4rh1fn.cloudfront.net/19898/sniper3d_v_202010_104_en_portrait.mp4\"\n"</ID>
    <ID>MaxLineLength:AdUnitParser.kt$AdUnitParser$*</ID>
    <ID>MaxLineLength:AdUnitParserTest.kt$AdUnitParserTest$" \"creative\":\"{\\\"frame\\\":\\\"default\\\",\\\"close_button\\\":\\\"default\\\",\\\"is_mraid_playable\\\":false,\\\"creative_id\\\":\\\"CR50780105\\\"}\",\n"</ID>
    <ID>MaxLineLength:AdUnitParserTest.kt$AdUnitParserTest$" \"https://events-dca.bidder.kayzen.io/win?raw=BH4f6iRihnLulIzOXQMUXh6c1TiVmZK62ozSYUYQtoyXTzdckTd8mIPKodEVgibZ04%2BlKJ4bBxrkeJloB1l27WRtBAukcgXDcBWnMgxc8K36oHk2Fd9vqkmiwZG2goazefVqCl34mFULtjvCtdsevHx3SWmUpZduPbYxnk%2FvNYlUs9L0mTGL7t13ZawZi2k2hbOsV3Y9vFybuprizYH%2BrVkFW9N56dYE8WxZl18QQl%2FaYGauJxRHYVY%2FXUDZOmStyoPJXufZiRkMlP1T6JgdOuNvBEhHdaxtw%2BdZ4l0fDjv%2Bq3Ix81CQzItBHSn9KBoQMx8FvknZFVHjP9CBZqgMcAFpl3TC7%2BQUdxr2r%2FjnNt0UYYa3KvIRULU%2FJaE5GRmJG1LdCrEakByMRaoH8lC2%2BCFQr2774bSK1BzoBNAnEzg2eOhxNZlPkOmxTLwZ5coVB4WxZpgXhD4WIgk%2F4asf2ehcRw9l1SXCd9p96T9jG9BdHZV0rUDcA3UZILeqAD8sWU3U7pfvbKDhCgWUl6T1XJDWk5Jj22dwOb4x7m30pH7XZPO94KxcmjsJKcMyWopNiEUAI6H5XN3X9Yi5W1waE6cE7Hq9qyIM%2FRO5Udmp6yw5JTeCu3fCrV7VMZgQWY%2Fwvzdr85pjepEu4rbkRbvvPK9rgTdDTaEI4V%2B3SO4Zm2KJ79ORaMe7M9CAWEu4Qv147H4XuZqD2Ve5AfUg5PgDxcj2Y%2B273wZQjC26bV6Y52V%2FKF4%2BYy5dWzTWvskJsMYqURXhG92QXaAcQ6Ov6mrcjOxiZPY9b8U4eC1eKNIWuuWEHc%2BVvUrRzZky%2Btf1%2BTJET5MceUOTwOozRRtUZXiuOQdHbnKV6rDs4Iys6KogV01QelZHM1FrzVAjdCZTqVbeksHNyY5%2F9wv8Kg80m%2Batr1EWCbtAlDMcPRBUHGWPGfB3K%2FsnlivuzLC0pbLCTbK%2BYMBPDsoDCj22xMmHI6e9hlJGoNzbaw9qt%2FcRwWqG2gioPDaIjtML9gSZ5NtB1LlIOF9vnuPF4Ux%2FhhtWbAkqFHmyi7RY46tS0NPn3vOxQGV4hk21xMfsM%2FEQwJBmYmIhLXJlpLWd9wXWq6TM2Zyk3BFytgKaev4e3hD8ehKgJL%2FO7qTlVrE1auDpuhvDkmfR%2BnobkcyHghEEvDulecpVmabcxGSKrnhN8pTkCBuxtf%2FPFe78iFbf%2F3eCkzFcAxcFFXzoJKaEWrH1IbjIj5thkxroCBYN5OLQuG45U58Bug%2Bm5LZpUKDdzSo3EAbJP2HDYO1mn%2B%2F2OBFNIGPswmsG7VcYN5NbDVLQNTE9jlnQ2PO5FX%2Bby42tCiYi2n4bo6NNTJ%2F%2F1Wc1mLhdnhXYuOt6yQ%3D%3D&amp;log=713675415-1662644755-157-1-46-304-1-p9inc-9a6dc32c90c3659e0eb09e9834392f6f86be147e-10065-244647-50780105&amp;p=0.36\"\n"</ID>
    <ID>MaxLineLength:AdUnitParserTest.kt$AdUnitParserTest$" \"value\":\"\",\n"</ID>
    <ID>MaxLineLength:AdUnitParserTest.kt$AdUnitParserTest$" \"value\":\"https://events-dca.bidder.kayzen.io/win?raw=BH4f6iRihnLulIzOXQMUXh6c1TiVmZK62ozSYUYQtoyXTzdckTd8mIPKodEVgibZ04%2BlKJ4bBxrkeJloB1l27WRtBAukcgXDcBWnMgxc8K36oHk2Fd9vqkmiwZG2goazefVqCl34mFULtjvCtdsevHx3SWmUpZduPbYxnk%2FvNYlUs9L0mTGL7t13ZawZi2k2hbOsV3Y9vFybuprizYH%2BrVkFW9N56dYE8WxZl18QQl%2FaYGauJxRHYVY%2FXUDZOmStyoPJXufZiRkMlP1T6JgdOuNvBEhHdaxtw%2BdZ4l0fDjv%2Bq3Ix81CQzItBHSn9KBoQMx8FvknZFVHjP9CBZqgMcAFpl3TC7%2BQUdxr2r%2FjnNt0UYYa3KvIRULU%2FJaE5GRmJG1LdCrEakByMRaoH8lC2%2BCFQr2774bSK1BzoBNAnEzg2eOhxNZlPkOmxTLwZ5coVB4WxZpgXhD4WIgk%2F4asf2ehcRw9l1SXCd9p96T9jG9BdHZV0rUDcA3UZILeqAD8sWU3U7pfvbKDhCgWUl6T1XJDWk5Jj22dwOb4x7m30pH7XZPO94KxcmjsJKcMyWopNiEUAI6H5XN3X9Yi5W1waE6cE7Hq9qyIM%2FRO5Udmp6yw5JTeCu3fCrV7VMZgQWY%2Fwvzdr85pjepEu4rbkRbvvPK9rgTdDTaEI4V%2B3SO4Zm2KJ79ORaMe7M9CAWEu4Qv147H4XuZqD2Ve5AfUg5PgDxcj2Y%2B273wZQjC26bV6Y52V%2FKF4%2BYy5dWzTWvskJsMYqURXhG92QXaAcQ6Ov6mrcjOxiZPY9b8U4eC1eKNIWuuWEHc%2BVvUrRzZky%2Btf1%2BTJET5MceUOTwOozRRtUZXiuOQdHbnKV6rDs4Iys6KogV01QelZHM1FrzVAjdCZTqVbeksHNyY5%2F9wv8Kg80m%2Batr1EWCbtAlDMcPRBUHGWPGfB3K%2FsnlivuzLC0pbLCTbK%2BYMBPDsoDCj22xMmHI6e9hlJGoNzbaw9qt%2FcRwWqG2gioPDaIjtML9gSZ5NtB1LlIOF9vnuPF4Ux%2FhhtWbAkqFHmyi7RY46tS0NPn3vOxQGV4hk21xMfsM%2FEQwJBmYmIhLXJlpLWd9wXWq6TM2Zyk3BFytgKaev4e3hD8ehKgJL%2FO7qTlVrE1auDpuhvDkmfR%2BnobkcyHghEEvDulecpVmabcxGSKrnhN8pTkCBuxtf%2FPFe78iFbf%2F3eCkzFcAxcFFXzoJKaEWrH1IbjIj5thkxroCBYN5OLQuG45U58Bug%2Bm5LZpUKDdzSo3EAbJP2HDYO1mn%2B%2F2OBFNIGPswmsG7VcYN5NbDVLQNTE9jlnQ2PO5FX%2Bby42tCiYi2n4bo6NNTJ%2F%2F1Wc1mLhdnhXYuOt6yQ%3D%3D&amp;log=713675415-1662644755-157-1-46-304-1-p9inc-9a6dc32c90c3659e0eb09e9834392f6f86be147e-10065-244647-50780105&amp;p=0.36\",\n"</ID>
    <ID>MaxLineLength:AdUnitParserTest.kt$AdUnitParserTest$" \"value\":\"https://t2.chartboost.com/base_templates/html/vast-moat-v2-8c431e484e.html\"\n"</ID>
    <ID>MaxLineLength:AdUnitParserTest.kt$AdUnitParserTest$"{\"frame\":\"default\",\"close_button\":\"default\",\"is_mraid_playable\":false,\"creative_id\":\"CR50780105\"}"</ID>
    <ID>MaxLineLength:AdUnitRenderer.kt$AdUnitRenderer$override</ID>
    <ID>MaxLineLength:AdsMediaPlayer.kt$AdsMediaPlayer$if</ID>
    <ID>MaxLineLength:Analytics.kt$Analytics$*</ID>
    <ID>MaxLineLength:Analytics.kt$Analytics$private static synchronized void trackMiscRevenueGeneratingEvent(MiscRevenueGeneratingEventType eventType, double amount, String currency, String source) {</ID>
    <ID>MaxLineLength:Analytics.kt$Analytics.IAPPurchaseInfo$*</ID>
    <ID>MaxLineLength:CBCrypto.kt$CBCrypto$fun</ID>
    <ID>MaxLineLength:CBHtmlWebViewClientTest.kt$CBHtmlWebViewClientTest$fun</ID>
    <ID>MaxLineLength:CBIdentityTest.kt$CBIdentityTest.&lt;no name provided>$override</ID>
    <ID>MaxLineLength:Chartboost.kt$Chartboost$onStarted.onStartCompleted(StartError(StartError.Code.INTERNAL, Exception("Initialization preconditions not met")))</ID>
    <ID>MaxLineLength:ChartboostDSPHelper.kt$ChartboostDSPHelper$if</ID>
    <ID>MaxLineLength:ChartboostTest.kt$ChartboostTest$val connectivityManager = getApplicationContext&lt;Context>().getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager</ID>
    <ID>MaxLineLength:ClickThrough.kt$internal fun getApplicationContext(): Context</ID>
    <ID>MaxLineLength:Environment.kt$Environment$(app.getSystemService(Context.AUDIO_SERVICE) as AudioManager).ringerMode != AudioManager.RINGER_MODE_NORMAL</ID>
    <ID>MaxLineLength:ExoPlayerDownloadManagerImpl.kt$ExoPlayerDownloadManagerImpl$private fun DownloadWrapper.isTimeToLiveExpired(): Boolean</ID>
    <ID>MaxLineLength:ExoPlayerDownloadManagerImplTest.kt$ExoPlayerDownloadManagerImplTest$fun ExoPlayerDownloadManagerImpl.cacheDataSourceFactory(): CacheDataSource.Factory</ID>
    <ID>MaxLineLength:ExoPlayerDownloadManagerImplTest.kt$ExoPlayerDownloadManagerImplTest$fun ExoPlayerDownloadManagerImpl.fakePrecacheFilesManager(): FakePrecacheFilesManager</ID>
    <ID>MaxLineLength:ExoPlayerMediaItemFactory.kt$ExoPlayerMediaItemFactory$fun mediaItemFrom(asset: VideoAsset): MediaItem?</ID>
    <ID>MaxLineLength:ImpressionBuilderTest.kt$ImpressionBuilderTest$every { templateLoaderMock.formatTemplateHtml(any(), any(), any(), any()) } returns "&lt;HTML>&lt;BODY>test content&lt;/BODY>&lt;/HTML>"</ID>
    <ID>MaxLineLength:ImpressionDependency.kt$ImpressionDependency$val impressionCallback: ImpressionIntermediateCallback</ID>
    <ID>MaxLineLength:ImpressionTrackerRequestTest.kt$ImpressionTrackerRequestTest$fun</ID>
    <ID>MaxLineLength:LoggingLevel.kt$LoggingLevel.ALL$/** Suspected integration errors as well as diagnostic errors and messages will be logged (in debug and release builds) */</ID>
    <ID>MaxLineLength:NativeBridgeCommandTest.kt$NativeBridgeCommandTest$"Parsing exception unknown field for current player duration: org.json.JSONException: JSONObject[\"duration\"] not found."</ID>
    <ID>MaxLineLength:OpenMeasurementControllerTest.kt$OpenMeasurementControllerTest$openMeasurementController.onImpressionOnWebviewPageStarted(MediaTypeOM.NATIVE, view.webView!!, verificationList)</ID>
    <ID>MaxLineLength:OpenMeasurementTracker.kt$OpenMeasurementTracker$getMediaEvents(this::signalMediaStateChange.name + " state: ${playerState.name}")?.playerStateChange(playerState)</ID>
    <ID>MaxLineLength:OpenRTBAdUnitParserTest.kt$OpenRTBAdUnitParserTest$"{\"encoding\": \"base64\",\"isNativePlayer\": \"true\", \"ShowCloseButton\": \"true\", \"AdType\": \"Interstitial\"}"</ID>
    <ID>MaxLineLength:OpenRTBAdUnitParserTest.kt$OpenRTBAdUnitParserTest$assertEquals("https://d1gnoa8d4rh1fn.cloudfront.net/19898/sniper3d_v_202010_104_en_portrait.mp4", adUnit.videoUrl)</ID>
    <ID>MaxLineLength:SDKBiddingTemplateParserTest.kt$"&lt;!doctype html>&lt;html>&lt;head id=\"chartboost-main-head\">&lt;title>Chartboost&lt;/title>&lt;meta charset=\"utf-8\">&lt;meta name=\"viewport\" content=\"user-scalable=no,width=device-width,initial-scale=1\">&lt;script>var Chartboost = window.Chartboost || {};\n"</ID>
    <ID>MaxLineLength:SDKBiddingTemplateParserTest.kt$SDKBiddingTemplateParserTest$private val params = "{\"encoding\": \"base64\",\"isNativePlayer\": true, \"ShowCloseButton\": true, \"AdType\": \"Interstitial\"}"</ID>
    <ID>MaxLineLength:SdkInitializerTest.kt$SdkInitializerTest$initWithInvalidCredentials("000000000000000000000000", "this_is_length_above_40_chars_valid_this_is_length_above_40_chars_valid")</ID>
    <ID>MaxLineLength:SdkInitializerTest.kt$SdkInitializerTest$sdkInitializer.initSdk("000000000000000000000000", "0000000000000000000000000000000000000000", startCallbackMock)</ID>
    <ID>MaxLineLength:TokenGeneratorTest.kt$TokenGeneratorTest$val identityBodyFields = IdentityBodyFields(TrackingState.TRACKING_ENABLED, "testiden", "uuid", "gaid", "setid", 1)</ID>
    <ID>MaxLineLength:TrackingEventName.kt$TrackingEventName.Companion$internal fun fromValues(values: List&lt;String>): List&lt;TrackingEventName></ID>
    <ID>MaxLineLength:UrlProcessor.kt$internal fun UrlArgs.convertMarketToHttps(): UrlArgs</ID>
    <ID>MaxLineLength:UrlProcessorTest.kt$UrlProcessorTest$fun</ID>
    <ID>MaxLineLength:UrlRedirect.kt$UrlRedirect$private fun Int.isRedirectCode(): Boolean</ID>
    <ID>MaxLineLength:UrlRedirect.kt$UrlRedirect$private fun Int.isSuccessCode(): Boolean</ID>
    <ID>MaxLineLength:UrlRedirectTest.kt$UrlRedirectTest$val finalUrl = "market://details?id=com.murka.scatterslots&amp;referrer=adjust_reftag%3Dc9nVEM2bl2yTK%26utm_source%3DAarki%26utm_campaign%3D%255Bg%257CScatter%255D%255Bp%257Candroid%255D%255Bid%257C16238%255DTier_1%26utm_content%3DAndroid%2BTest%2BApp%2B%2528DO%2BNOT%2BMODIFY%2529_com.chartboost.sdk.sample.cbtest%26utm_term%3DScatterSlots_UA_WednesdayDance_EN_720x1280_Vid-20s_CRM_IP_MNAG-CL"</ID>
    <ID>MaxLineLength:UrlRedirectTest.kt$UrlRedirectTest$val url = "market://details?id=com.murka.scatterslots&amp;referrer=adjust_reftag%3Dc9nVEM2bl2yTK%26utm_source%3DAarki%26utm_campaign%3D%255Bg%257CScatter%255D%255Bp%257Candroid%255D%255Bid%257C16238%255DTier_1%26utm_content%3DAndroid%2BTest%2BApp%2B%2528DO%2BNOT%2BMODIFY%2529_com.chartboost.sdk.sample.cbtest%26utm_term%3DScatterSlots_UA_WednesdayDance_EN_720x1280_Vid-20s_CRM_IP_MNAG-CL"</ID>
    <ID>MaxLineLength:UrlResolverTest.kt$UrlResolverTest.Success$suspend fun action(urlArgs: UrlArgs): Result&lt;UrlActionResult></ID>
    <ID>MaxLineLength:VideoBaseTest.kt$VideoBaseTest$)</ID>
    <ID>MaxLineLength:VideoBaseTest.kt$VideoBaseTest$// anyConstructed&lt;FrameLayout>() // Missing mocked calls inside every { ... } block: make sure the object inside the block is a mock</ID>
    <ID>MaxLineLength:VideoBuffer.kt$VideoBuffer$// if we decide to make it less restrictive, then divide bufferUnlockThreshold until optimal value is reached</ID>
    <ID>MaxLineLength:VideoProtocolTest.kt$VideoProtocolTest$verify(exactly = 1) { openMeasurementImpressionCallbackMock.onImpressionNotifyStateChanged(PlayerState.FULLSCREEN) }</ID>
    <ID>MaxLineLength:VideoRepositoryExoplayer.kt$VideoRepositoryExoplayer$override fun isFileDownloadingOrDownloaded(videoFilename: String): Boolean</ID>
    <ID>NestedBlockDepth:CBImpressionActivity.kt$CBImpressionActivity$override fun setFullscreen()</ID>
    <ID>NestedBlockDepth:GoogleAdvertisingId.kt$GoogleAdvertisingId$override fun getAdvertisingIdHolder(): AdvertisingIDHolder</ID>
    <ID>NestedBlockDepth:OpenRTBAdUnitParser.kt$OpenRTBAdUnitParser$@Throws(JSONException::class) private fun parseOpenRtbResponse(response: JSONObject): OpenRTBModel</ID>
    <ID>NestedBlockDepth:OpenRTBTest.kt$OpenRTBTest$private fun appendRequestBodyOpenRTBParams(isOmEnabled: Boolean)</ID>
    <ID>NestedBlockDepth:UrlRedirect.kt$UrlRedirect$fun redirect( url: String?, limit: Int = DEFAULT_REDIRECT_LIMIT, ): Result&lt;String></ID>
    <ID>NestedBlockDepth:VideoRepositoryMediaPlayer.kt$VideoRepositoryMediaPlayer$override fun removeAsset(videoAsset: VideoAsset?): Boolean</ID>
    <ID>NestedBlockDepth:VideoRepositoryMediaPlayer.kt$VideoRepositoryMediaPlayer$private fun checkStartDownloadConditions( url: String, filename: String, showImmediately: Boolean, callback: AdUnitVideoPrecacheTemp?, isDownloadingOrDownloaded: Boolean, dest: File?, ): StartDownloadConditions</ID>
    <ID>PackageNaming:AbstractInterceptor.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders.interceptors</ID>
    <ID>PackageNaming:ActivityRendererInterface.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:AdLoader.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders</ID>
    <ID>PackageNaming:AdLoaderImplTest.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders</ID>
    <ID>PackageNaming:AdUnit.kt$package com.chartboost.sdk.internal.AdUnitManager.data</ID>
    <ID>PackageNaming:AdUnitBannerData.kt$package com.chartboost.sdk.internal.AdUnitManager.data</ID>
    <ID>PackageNaming:AdUnitLoader.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders</ID>
    <ID>PackageNaming:AdUnitLoaderAdCallback.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders</ID>
    <ID>PackageNaming:AdUnitLoaderCallback.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders</ID>
    <ID>PackageNaming:AdUnitLoaderInterceptorChain.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders.interceptors</ID>
    <ID>PackageNaming:AdUnitLoaderTest.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders</ID>
    <ID>PackageNaming:AdUnitParser.kt$package com.chartboost.sdk.internal.AdUnitManager.parsers</ID>
    <ID>PackageNaming:AdUnitParserCommon.kt$package com.chartboost.sdk.internal.AdUnitManager.parsers</ID>
    <ID>PackageNaming:AdUnitParserCommonTest.kt$package com.chartboost.sdk.internal.AdUnitManager.parsers</ID>
    <ID>PackageNaming:AdUnitParserTest.kt$package com.chartboost.sdk.internal.AdUnitManager.parsers</ID>
    <ID>PackageNaming:AdUnitRenderer.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:AdUnitRendererActivityInterface.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:AdUnitRendererAdCallback.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:AdUnitRendererImpressionCallback.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:AdUnitRendererShowRequest.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:AdUnitRendererShowRequestTest.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:AdUnitRendererTest.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:AppRequest.kt$package com.chartboost.sdk.internal.AdUnitManager.data</ID>
    <ID>PackageNaming:AssetDownloadedCallback.kt$package com.chartboost.sdk.internal.AdUnitManager.assets</ID>
    <ID>PackageNaming:AssetDownloadedResult.kt$package com.chartboost.sdk.internal.AdUnitManager.assets</ID>
    <ID>PackageNaming:AssetsDownloader.kt$package com.chartboost.sdk.internal.AdUnitManager.assets</ID>
    <ID>PackageNaming:AssetsDownloaderImpl.kt$package com.chartboost.sdk.internal.AdUnitManager.assets</ID>
    <ID>PackageNaming:AssetsDownloaderTest.kt$package com.chartboost.sdk.internal.AdUnitManager.assets</ID>
    <ID>PackageNaming:BidderTokenGenerator.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:CBCrypto.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:CBCryptoTest.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:CBError.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:CBHtmlWebChromeClient.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBHtmlWebChromeClientTest.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBHtmlWebView.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBHtmlWebViewClient.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBHtmlWebViewClientTest.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBHtmlWebViewProtocol.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBHtmlWebViewProtocolTest.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBImageDownloader.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CBImageDownloaderTest.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CBJSON.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:CBMraidWebViewProtocol.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBNetworkRequest.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CBNetworkServerResponse.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CBReachability.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CBReachabilityTestKotlin.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CBRequestManagerTestKotlin.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CBRichWebChromeClient.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBSSLSocketFactory.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CBTemplateProxy.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBTemplateProxyTest.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBUtilityTest.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:CBWebChromeClientTest.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:CBWebView.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:ClickParams.kt$package com.chartboost.sdk.internal.Networking.requests.models</ID>
    <ID>PackageNaming:ClickRequest.kt$package com.chartboost.sdk.internal.Networking.requests</ID>
    <ID>PackageNaming:CommonWebViewBase.kt$package com.chartboost.sdk.internal.View</ID>
    <ID>PackageNaming:CompleteParamsModel.kt$package com.chartboost.sdk.internal.Networking.requests.models</ID>
    <ID>PackageNaming:CompleteRequest.kt$package com.chartboost.sdk.internal.Networking.requests</ID>
    <ID>PackageNaming:ConfigurationBodyFields.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:ConnectionType.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:Connectivity.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:ConnectivityTest.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:CustomWebViewInterface.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:DeviceBodyFields.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:DeviceBodyFieldsFactory.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:DeviceBodyFieldsFactoryTest.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:DisplayMeasurement.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:DisplayMeasurementTest.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:EndpointRepositoryBase.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:Extensions.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:HtmlWebViewBase.kt$package com.chartboost.sdk.internal.View</ID>
    <ID>PackageNaming:IdentityBodyFields.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:ImpressionBuilder.kt$package com.chartboost.sdk.internal.AdUnitManager.impression</ID>
    <ID>PackageNaming:ImpressionBuilderTest.kt$package com.chartboost.sdk.internal.AdUnitManager.impression</ID>
    <ID>PackageNaming:ImpressionHolder.kt$package com.chartboost.sdk.internal.AdUnitManager.impression</ID>
    <ID>PackageNaming:ImpressionMediaType.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:ImpressionState.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:InfoIcon.kt$package com.chartboost.sdk.internal.AdUnitManager.data</ID>
    <ID>PackageNaming:MRAID2RobolectricTest.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:MRAID2Test.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:MediationBodyFields.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:MockAdGetInterceptor.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders.interceptors</ID>
    <ID>PackageNaming:MraidWebViewBase.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:NativeBridgeCommand.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:NativeBridgeCommandTest.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:NetworkStateChecker.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:NetworkType.kt$package com.chartboost.sdk.internal.Networking.requests</ID>
    <ID>PackageNaming:OmSdkModel.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:OpenRTBAdUnitParser.kt$package com.chartboost.sdk.internal.AdUnitManager.parsers</ID>
    <ID>PackageNaming:OpenRTBAdUnitParserTest.kt$package com.chartboost.sdk.internal.AdUnitManager.parsers</ID>
    <ID>PackageNaming:OpenRTBTest.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:Orientation.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:OrientationHelper.kt$package com.chartboost.sdk.internal.View</ID>
    <ID>PackageNaming:OrtbLoader.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders</ID>
    <ID>PackageNaming:OrtbLoaderTest.kt$package com.chartboost.sdk.internal.AdUnitManager.loaders</ID>
    <ID>PackageNaming:PrefetcherTest.kt$package com.chartboost.sdk.internal.AssetLoader</ID>
    <ID>PackageNaming:PrivacyBodyFields.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:ReachabilityBodyFields.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:RendererActivityBridge.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:RendererActivityBridgeImpl.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:RendererActivityBridgeImplTest.kt$package com.chartboost.sdk.internal.AdUnitManager.render</ID>
    <ID>PackageNaming:RequestBodyBuilderImpl.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:RequestBodyFieldsTest.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:RichWebViewBase.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:SDKBiddingTemplateParser.kt$package com.chartboost.sdk.internal.AdUnitManager.parsers</ID>
    <ID>PackageNaming:SDKBiddingTemplateParserTest.kt$package com.chartboost.sdk.internal.AdUnitManager.parsers</ID>
    <ID>PackageNaming:SessionBodyFields.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:ShowParamsModel.kt$package com.chartboost.sdk.internal.Networking.requests.models</ID>
    <ID>PackageNaming:SingleClickGestureDetector.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:TemplateLoader.kt$package com.chartboost.sdk.internal.AssetLoader</ID>
    <ID>PackageNaming:TemplateLoaderTest.kt$package com.chartboost.sdk.internal.AssetLoader</ID>
    <ID>PackageNaming:TimeSourceBodyFields.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:TokenGeneratorTest.kt$package com.chartboost.sdk.internal.Libraries</ID>
    <ID>PackageNaming:TrackingBodyBuilder.kt$package com.chartboost.sdk.internal.Networking.requests</ID>
    <ID>PackageNaming:TrackingBodyBuilderTest.kt$package com.chartboost.sdk.internal.Networking.requests</ID>
    <ID>PackageNaming:TrackingConfig.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:TrackingConfigTest.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:TrackingRequest.kt$package com.chartboost.sdk.internal.Networking.requests</ID>
    <ID>PackageNaming:TrackingRequestTest.kt$package com.chartboost.sdk.internal.Networking</ID>
    <ID>PackageNaming:UserAgentHelper.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:VideoPreCachingModel.kt$package com.chartboost.sdk.internal.Model</ID>
    <ID>PackageNaming:VideoRequest.kt$package com.chartboost.sdk.internal.Networking.requests</ID>
    <ID>PackageNaming:ViewBase.kt$package com.chartboost.sdk.internal.View</ID>
    <ID>PackageNaming:WebViewCorsErrorHandler.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PackageNaming:WebViewCorsErrorHandlerTest.kt$package com.chartboost.sdk.internal.WebView</ID>
    <ID>PrintStackTrace:GenericDataUseConsent.kt$GenericDataUseConsent$e</ID>
    <ID>PrintStackTrace:SdkInitializer.kt$SdkInitializer$e</ID>
    <ID>ReturnCount:AdApi.kt$AdApi$protected fun shouldStopCache(location: String): Boolean</ID>
    <ID>ReturnCount:AdUnitRenderer.kt$AdUnitRenderer$fun render( appRequest: AppRequest, callback: AdUnitRendererAdCallback, )</ID>
    <ID>ReturnCount:AnalyticsApi.kt$AnalyticsApi$fun trackInAppPurchaseEvent( productID: String, title: String, description: String, price: String, currency: String, purchaseData: String?, purchaseSignature: String?, userID: String?, purchaseToken: String?, iapType: Analytics.IAPType, )</ID>
    <ID>ReturnCount:AnalyticsApi.kt$AnalyticsApi$fun trackLevelInfo( eventLabel: String, type: Analytics.LevelType, mainLevel: Int, subLevel: Int, description: String, timestamp: Long, )</ID>
    <ID>ReturnCount:AnalyticsApi.kt$AnalyticsApi$private fun calculateCost(price: String): Float</ID>
    <ID>ReturnCount:BannerApi.kt$BannerApi$fun show( ad: Banner, callback: BannerCallback, )</ID>
    <ID>ReturnCount:CBHtmlWebViewClient.kt$CBHtmlWebViewClient$private fun attemptToOpenUrl(url: String): Boolean</ID>
    <ID>ReturnCount:CBRichWebChromeClient.kt$CBRichWebChromeClient$override fun onJsPrompt( view: WebView?, url: String?, message: String?, defaultValue: String?, result: JsPromptResult?, ): Boolean</ID>
    <ID>ReturnCount:CBViewProtocol.kt$CBViewProtocol$fun prepare(): Impression?</ID>
    <ID>ReturnCount:CCPA.kt$CCPA.CCPA_CONSENT.Companion$@JvmStatic fun fromValue(value: String): CCPA_CONSENT?</ID>
    <ID>ReturnCount:Custom.kt$Custom$private fun customInit()</ID>
    <ID>ReturnCount:EventThrottler.kt$EventThrottler$@Synchronized fun throttle(event: TrackingEvent?): TrackingEvent?</ID>
    <ID>ReturnCount:EventTrackerImpl.kt$EventTrackerImpl$private fun TrackingEvent.calculateLatencyInSeconds(): Float</ID>
    <ID>ReturnCount:GDPR.kt$GDPR.GDPR_CONSENT.Companion$@JvmStatic fun fromValue(value: String): GDPR_CONSENT?</ID>
    <ID>ReturnCount:ImpressionBuilder.kt$ImpressionBuilder$internal fun createImpressionHolderFromAppRequest( appRequest: AppRequest, callback: AdUnitRendererImpressionCallback, bannerView: ViewGroup?, impressionIntermediateCallback: ImpressionIntermediateCallback, impressionClickCallback: ImpressionClickCallback, viewProtocolBuilder: ImpressionViewProtocolBuilder, impressionInterface: ImpressionInterface, webViewTimeoutInterface: WebViewTimeoutInterface, nativeBridgeCommand: NativeBridgeCommand, templateLoader: TemplateLoader, ): ImpressionHolder</ID>
    <ID>ReturnCount:ImpressionBuilder.kt$ImpressionBuilder$private fun checkMissingAssets( adUnit: AdUnit, baseDir: File, location: String, ): CBError.Impression?</ID>
    <ID>ReturnCount:ImpressionBuilder.kt$ImpressionBuilder$private fun loadTemplateHtml( templateLoader: TemplateLoader, adUnit: AdUnit, baseDir: File, location: String, ): String?</ID>
    <ID>ReturnCount:ImpressionClick.kt$ImpressionClick$override fun onClick( shouldDismiss: Boolean?, impressionState: ImpressionState, ): Boolean</ID>
    <ID>ReturnCount:OpenMeasurementManager.kt$OpenMeasurementManager$fun injectOmidJsIntoHtml(html: String): String</ID>
    <ID>ReturnCount:OrientationHelper.kt$private fun Context?.getOrientation(displayMeasurement: DisplayMeasurement): Orientation</ID>
    <ID>ReturnCount:OrtbLoader.kt$OrtbLoader$override fun loadAd( params: LoadParams, callback: LoadResult.() -> Unit, )</ID>
    <ID>ReturnCount:ProviderInstallerHelper.kt$ProviderInstallerHelper$private fun isGooglePlayServicesAvailable(): Boolean</ID>
    <ID>ReturnCount:TempFileDownloadHelper.kt$TempFileDownloadHelper$fun isAssetDownloading( directory: File?, filename: String?, ): Boolean</ID>
    <ID>ReturnCount:UrlRedirect.kt$UrlRedirect$fun redirect( url: String?, limit: Int = DEFAULT_REDIRECT_LIMIT, ): Result&lt;String></ID>
    <ID>ReturnCount:VideoRepositoryMediaPlayer.kt$VideoRepositoryMediaPlayer$override fun getVideoDownloadState(asset: VideoAsset?): DownloadState</ID>
    <ID>ReturnCount:VideoRepositoryMediaPlayer.kt$VideoRepositoryMediaPlayer$private fun checkStartDownloadConditions( url: String, filename: String, showImmediately: Boolean, callback: AdUnitVideoPrecacheTemp?, isDownloadingOrDownloaded: Boolean, dest: File?, ): StartDownloadConditions</ID>
    <ID>ReturnCount:VideoRepositoryMediaPlayer.kt$VideoRepositoryMediaPlayer$private fun isFileCached(asset: VideoAsset?): Boolean</ID>
    <ID>ReturnCount:VisibilityTracker.kt$VisibilityTracker$private fun isViewVisible(): Boolean</ID>
    <ID>ReturnCount:VisibilityTracker.kt$VisibilityTracker$private fun setViewTreeObserver()</ID>
    <ID>SerialVersionUIDInSerializableClass:UrlOpenerException.kt$UrlOpenerFallbackReason : ThrowableSerializable</ID>
    <ID>SwallowedException:AdUnitLoaderTest.kt$AdUnitLoaderTest$e: UninitializedPropertyAccessException</ID>
    <ID>SwallowedException:AdvertisingIdImpl.kt$AdvertisingIdImpl$e: Exception</ID>
    <ID>SwallowedException:AmazonAdvertisingId.kt$AmazonAdvertisingId$ex: Settings.SettingNotFoundException</ID>
    <ID>SwallowedException:CBIdentity.kt$CBIdentity$e: ClassNotFoundException</ID>
    <ID>SwallowedException:Chartboost.kt$Chartboost$e: Exception</ID>
    <ID>SwallowedException:NativeBridgeCommand.kt$NativeBridgeCommand$e: Exception</ID>
    <ID>SwallowedException:OmSdkModel.kt$e: Exception</ID>
    <ID>SwallowedException:OpenRTBAdUnitParser.kt$OpenRTBAdUnitParser$e: Exception</ID>
    <ID>SwallowedException:PutDataUseConsentUseCase.kt$PutDataUseConsentUseCaseImpl$e: Exception</ID>
    <ID>SwallowedException:VisibilityTracker.kt$VisibilityTracker$e: Exception</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:UrlResolver.kt$UrlResolver$Exception()</ID>
    <ID>TooGenericExceptionCaught:AdLoader.kt$AdLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AdLoader.kt$AdLoaderImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AdUnitLoader.kt$AdUnitLoader$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:AdUnitRenderer.kt$AdUnitRenderer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AdsMediaPlayer.kt$AdsMediaPlayer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AdvertisingIdImpl.kt$AdvertisingIdImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnalyticsApi.kt$AnalyticsApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Application.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:Banner.kt$Banner$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Base64Wrapper.kt$Base64Wrapper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CBHtmlWebViewProtocol.kt$CBHtmlWebViewProtocol$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CBIdentity.kt$CBIdentity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CBIdentity.kt$CBIdentity$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:CBImageDownloader.kt$CBImageDownloader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CBImpression.kt$CBImpression$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CBImpressionActivity.kt$CBImpressionActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CBMraidWebViewProtocol.kt$CBMraidWebViewProtocol$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CBTemplateProxy.kt$CBTemplateProxy$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Chartboost.kt$Chartboost$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ChartboostApi.kt$ChartboostApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CommonWebViewBase.kt$CommonWebViewBase$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:DependencyContainer.kt$DependencyContainerInternalImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeviceBodyFieldsFactory.kt$DeviceBodyFieldsFactory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DisplayMeasurement.kt$DisplayMeasurement$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Environment.kt$Environment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EventTrackerImpl.kt$EventTrackerImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExoPlayerDownloadManagerImpl.kt$ExoPlayerDownloadManagerImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Extensions.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GenericDataUseConsent.kt$GenericDataUseConsent$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IFA.kt$IFA$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImpressionActivityIntentWrapper.kt$ImpressionActivityIntentWrapper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImpressionActivityPresenter.kt$ImpressionActivityPresenter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImpressionBuilder.kt$ImpressionBuilder$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ImpressionView.kt$ImpressionView$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IntentResolver.kt$IntentResolver$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Interstitial.kt$Interstitial$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NativeBridgeCommand.kt$NativeBridgeCommand$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OmSdkModel.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OpenMeasurementController.kt$OpenMeasurementController$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OpenMeasurementManager.kt$OpenMeasurementManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OpenMeasurementManager.kt$OpenMeasurementManager$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:OpenMeasurementSessionBuilder.kt$OpenMeasurementSessionBuilder$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OpenMeasurementTracker.kt$OpenMeasurementTracker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OpenRTBAdUnitParser.kt$OpenRTBAdUnitParser$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OrientationHelper.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ProviderInstallerHelper.kt$ProviderInstallerHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PutDataUseConsentUseCase.kt$PutDataUseConsentUseCaseImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RendererActivityBridgeImpl.kt$RendererActivityBridgeImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ResourceLoader.kt$ResourceLoader$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:Rewarded.kt$Rewarded$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SDKBiddingTemplateParser.kt$SDKBiddingTemplateParser$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SdkInitializer.kt$SdkInitializer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SharedPrefsHelper.kt$SharedPrefsHelper$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:TempFileDownloadHelper.kt$TempFileDownloadHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TemplateLoader.kt$TemplateLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TrackingEventCache.kt$TrackingEventCache$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UrlRedirect.kt$UrlRedirect$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UserAgentHelper.kt$UserAgentHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VideoBuffer.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VideoProtocol.kt$VideoProtocol$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VisibilityTracker.kt$VisibilityTracker$e: Exception</ID>
    <ID>TooGenericExceptionThrown:GenericDataUseConsent.kt$GenericDataUseConsent$throw Exception(msg)</ID>
    <ID>TooGenericExceptionThrown:NativeBridgeCommand.kt$NativeBridgeCommand$throw RuntimeException("test crash")</ID>
    <ID>TooGenericExceptionThrown:TestContainer.kt$TestContainer$throw Error("More than 100 iterations. Likely an infinite loop.")</ID>
    <ID>TooGenericExceptionThrown:TestContainerBuilder.kt$TestContainerBuilder$throw Error(ex)</ID>
    <ID>TooGenericExceptionThrown:UrlRedirectTest.kt$UrlRedirectTest$throw Throwable("error")</ID>
    <ID>TooManyFunctions:AdApi.kt$AdApi : AdUnitRendererAdCallbackAdUnitLoaderAdCallbackEventTrackerExtensions</ID>
    <ID>TooManyFunctions:AdUnitLoader.kt$AdUnitLoader : AdUnitLoaderCallbackAssetDownloadedCallbackEventTrackerExtensions</ID>
    <ID>TooManyFunctions:AdUnitRenderer.kt$AdUnitRenderer : AdUnitRendererImpressionCallbackImpressionIntermediateCallbackImpressionClickCallbackImpressionInterfaceAdUnitRendererActivityInterfaceEventTrackerExtensions</ID>
    <ID>TooManyFunctions:AdUnitRendererImpressionCallback.kt$AdUnitRendererImpressionCallback</ID>
    <ID>TooManyFunctions:AdsExoPlayer.kt$AdsExoPlayer : AdsVideoPlayerCallbackListenerVideoProgressBackgroundListener</ID>
    <ID>TooManyFunctions:AdsMediaPlayer.kt$AdsMediaPlayer : AdsVideoPlayerCallbackVideoProgressVideoBufferListenerBackgroundListener</ID>
    <ID>TooManyFunctions:CBImpression.kt$CBImpression : ImpressionClickableImpressionDismissableImpressionCompletableImpressionViewableImpressionStateInterface</ID>
    <ID>TooManyFunctions:CBImpressionActivity.kt$CBImpressionActivity : ActivityImpressionActivityView</ID>
    <ID>TooManyFunctions:CBViewProtocol.kt$CBViewProtocol : EventTrackerExtensions</ID>
    <ID>TooManyFunctions:EventTrackerImpl.kt$EventTrackerImpl : EventTrackerExtensionsEventTracker</ID>
    <ID>TooManyFunctions:ExoPlayerDownloadManager.kt$ExoPlayerDownloadManager</ID>
    <ID>TooManyFunctions:ExoPlayerDownloadManagerImpl.kt$ExoPlayerDownloadManagerImpl : ExoPlayerDownloadManagerListenerEvictUrlCallback</ID>
    <ID>TooManyFunctions:ImpressionActivityPresenter.kt$ImpressionActivityPresenter : ImpressionActivityPresenterActivityRendererInterface</ID>
    <ID>TooManyFunctions:ImpressionClick.kt$ImpressionClick : ImpressionClickableClickTracking</ID>
    <ID>TooManyFunctions:ImpressionInterface.kt$ImpressionInterface</ID>
    <ID>TooManyFunctions:ImpressionView.kt$ImpressionView : ImpressionViewable</ID>
    <ID>TooManyFunctions:ImpressionViewable.kt$ImpressionViewable</ID>
    <ID>TooManyFunctions:Logger.kt$Logger</ID>
    <ID>TooManyFunctions:NativeBridgeCommand.kt$NativeBridgeCommand</ID>
    <ID>TooManyFunctions:OpenMeasurementController.kt$OpenMeasurementController : OpenMeasurementImpressionCallback</ID>
    <ID>TooManyFunctions:OpenMeasurementImpressionCallback.kt$OpenMeasurementImpressionCallback</ID>
    <ID>TooManyFunctions:OpenMeasurementManager.kt$OpenMeasurementManager</ID>
    <ID>TooManyFunctions:OpenMeasurementSessionBuilder.kt$OpenMeasurementSessionBuilder</ID>
    <ID>TooManyFunctions:OpenMeasurementTracker.kt$OpenMeasurementTracker</ID>
    <ID>TooManyFunctions:OpenRTBAdUnitParser.kt$OpenRTBAdUnitParser</ID>
    <ID>TooManyFunctions:RendererActivityBridge.kt$RendererActivityBridge</ID>
    <ID>TooManyFunctions:RendererActivityBridgeImpl.kt$RendererActivityBridgeImpl : RendererActivityBridgeEventTrackerExtensions</ID>
    <ID>TooManyFunctions:SdkInitializer.kt$SdkInitializer : ConfigRequestCallback</ID>
    <ID>TooManyFunctions:TrackingBodyBuilder.kt$TrackingBodyBuilder</ID>
    <ID>TooManyFunctions:VideoProtocol.kt$VideoProtocol : CBViewProtocolAdsVideoPlayerListener</ID>
    <ID>TooManyFunctions:VideoRepositoryExoplayer.kt$VideoRepositoryExoplayer : VideoRepositoryVideoRequestCallback</ID>
    <ID>TooManyFunctions:VideoRepositoryMediaPlayer.kt$VideoRepositoryMediaPlayer : VideoRequestCallbackVideoRepository</ID>
    <ID>TopLevelPropertyNaming:SDKBiddingTemplateParserTest.kt$private const val templateMraid = "&lt;!doctype html>&lt;html>&lt;head id=\"chartboost-main-head\">&lt;title>Chartboost&lt;/title>&lt;meta charset=\"utf-8\">&lt;meta name=\"viewport\" content=\"user-scalable=no,width=device-width,initial-scale=1\">&lt;script>var Chartboost = window.Chartboost || {};\n" + " // We do this in oder to avoid any error caused by putting the app in the background\n" + " // before the JS has been loaded. This will be overwritten later by the real function\n" + " Chartboost.EventHandler = {\n" + " handleNativeEvent: function () {},\n" + " };\n" + " Chartboost.BiddingParams = \"{% params %}\";\n" + " Chartboost.Params = {\n" + " AdType: \"{{ ad_type }}\",\n" + " ShowCloseButton: \"{{ show_close_button }}\",\n" + " CloseButtonCorner: \"{% close_button_corner %}\",\n" + " deviceId: \"{% device_id %}\",\n" + " encoding: \"{% encoding %}\",\n" + " Crid: \"{% crid %}\",\n" + " BidderId: \"{% bidder_id %}\",\n" + " PublisherAppId: \"{% publisher_app_id %}\",\n" + " // WARNING: This will be in the form of [\"moat\"]\n" + " // therefore it needs to be wrapped in single quotes\n" + " CertificationProviders: '{% certification_providers %}',\n" + " AdDomain: \"{% ad_domain %}\",\n" + " Geo: \"{% geo %}\",\n" + " sdkVersion: \"{% sdk_version %}\",\n" + " isMuted: \"{% is_muted %}\",\n" + " adm: \"{% adm %}\",\n" + " isBanner: \"{% is_banner %}\",\n" + " inlinedAssets: \"{% inlined_assets %}\",\n" + " impressionId: \"{% impression_id %}\",\n" + " templateSettings: \"{% template_settings %}\",\n" + " GoogleFamilyApp: \"{% google_family_app %}\",\n" + " LeftNotchPinholePosition: \"{% left_notch_pinhole_position %}\",\n" + " RightNotchPinholePosition: \"{% right_notch_pinhole_position %}\",\n" + " CentreNotchPinholePosition: \"{% centre_notch_pinhole_position %}\",\n" + " isNativeAd: \"{% is_native_ad %}\",\n" + " };&lt;/script>&lt;script>(()"</ID>
    <ID>TopLevelPropertyNaming:SDKBiddingTemplateParserTest.kt$private const val templateMraidMissingBidding = "&lt;!doctype html>&lt;html>&lt;head id=\"chartboost-main-head\">&lt;title>Chartboost&lt;/title>&lt;meta charset=\"utf-8\">&lt;meta name=\"viewport\" content=\"user-scalable=no,width=device-width,initial-scale=1\">&lt;script>var Chartboost = window.Chartboost || {};\n" + " // We do this in oder to avoid any error caused by putting the app in the background\n" + " // before the JS has been loaded. This will be overwritten later by the real function\n" + " Chartboost.EventHandler = {\n" + " handleNativeEvent: function () {},\n" + " };\n" + " Chartboost.Params = {\n" + " AdType: \"{{ ad_type }}\",\n" + " ShowCloseButton: \"{{ show_close_button }}\",\n" + " CloseButtonCorner: \"{% close_button_corner %}\",\n" + " deviceId: \"{% device_id %}\",\n" + " encoding: \"{% encoding %}\",\n" + " Crid: \"{% crid %}\",\n" + " BidderId: \"{% bidder_id %}\",\n" + " PublisherAppId: \"{% publisher_app_id %}\",\n" + " // WARNING: This will be in the form of [\"moat\"]\n" + " // therefore it needs to be wrapped in single quotes\n" + " CertificationProviders: '{% certification_providers %}',\n" + " AdDomain: \"{% ad_domain %}\",\n" + " Geo: \"{% geo %}\",\n" + " sdkVersion: \"{% sdk_version %}\",\n" + " isMuted: \"{% is_muted %}\",\n" + " isBanner: \"{% is_banner %}\",\n" + " inlinedAssets: \"{% inlined_assets %}\",\n" + " impressionId: \"{% impression_id %}\",\n" + " templateSettings: \"{% template_settings %}\",\n" + " GoogleFamilyApp: \"{% google_family_app %}\",\n" + " LeftNotchPinholePosition: \"{% left_notch_pinhole_position %}\",\n" + " RightNotchPinholePosition: \"{% right_notch_pinhole_position %}\",\n" + " CentreNotchPinholePosition: \"{% centre_notch_pinhole_position %}\",\n" + " isNativeAd: \"{% is_native_ad %}\",\n" + " };&lt;/script>&lt;script>(()"</ID>
    <ID>UnusedPrivateMember:AdApiDecoder.kt$AdApiDecoder.AdApiDecoderError.BAD_BASE_64$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:AdApiDecoder.kt$AdApiDecoder.AdApiDecoderError.INTERNAL$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:AdApiDecoder.kt$AdApiDecoder.AdApiDecoderError.INVALID_RESPONSE$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:CBImpressionActivity.kt$CBImpressionActivity$private fun onBackInvoked()</ID>
    <ID>UnusedPrivateMember:NativeBridgeCommandTest.kt$NativeBridgeCommandTest$val context: Context = mockk(relaxed = true)</ID>
    <ID>UnusedPrivateMember:OpenRTBTest.kt$OpenRTBTest$val configMock = mockk&lt;PrivacyStandardsConfig>()</ID>
    <ID>UnusedPrivateMember:RendererActivityBridgeImplTest.kt$RendererActivityBridgeImplTest$val configRef = AtomicReference(sdkConfigurationMock)</ID>
    <ID>UnusedPrivateMember:TestContainerBuilder.kt$TestContainerBuilder$private fun assertIsMock( message: String, instance: Any, )</ID>
    <ID>UnusedPrivateMember:UrlOpenerException.kt$UrlOpenerFallbackReason.MissingAppToOpenSchema$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:UrlOpenerException.kt$UrlOpenerFallbackReason.NotValidScheme$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:UrlOpenerException.kt$UrlOpenerFallbackReason.WrongPreference$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:UrlRedirect.kt$UrlRedirect.Failure.EmptyOrNullUrl$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:UrlRedirect.kt$UrlRedirect.Failure.NullConnection$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:UrlRedirect.kt$UrlRedirect.Failure.TooManyRedirects$private fun readResolve(): Any</ID>
    <ID>UnusedPrivateMember:UrlResolverTest.kt$UrlResolverTest.Fail$urlArgs: UrlArgs</ID>
    <ID>UnusedPrivateMember:UrlResolverTest.kt$UrlResolverTest.Success$urlArgs: UrlArgs</ID>
    <ID>UseRequire:TemplateLoader.kt$TemplateLoader$throw IllegalArgumentException("Missing required template parameter $this")</ID>
    <ID>UtilityClassWithPublicConstructor:CBSSLSocketFactory.kt$CBSSLSocketFactory</ID>
    <ID>VariableNaming:CBImpressionActivityTest.kt$CBImpressionActivityTest$private var TEST_APP_ID = "4f7b433509b6025804000002"</ID>
    <ID>VariableNaming:CBImpressionActivityTest.kt$CBImpressionActivityTest$private var TEST_SIGNATURE_ID = "dd2d41b69ac01b80f443f5b6cf06096d457f82bd"</ID>
    <ID>WildcardImport:AdApiCallbackSenderTest.kt$import com.chartboost.sdk.events.*</ID>
    <ID>WildcardImport:AdCallback.kt$import com.chartboost.sdk.events.*</ID>
    <ID>WildcardImport:AdUnitParserCommonTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:AdUnitParserTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:AdUnitRendererShowRequestTest.kt$import com.chartboost.sdk.internal.Model.*</ID>
    <ID>WildcardImport:AdUnitRendererShowRequestTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:AdUnitRendererTest.kt$import com.chartboost.sdk.internal.Model.*</ID>
    <ID>WildcardImport:AdUnitRendererTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:AdUnitRendererTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:BannerTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:ChartboostApiTest.kt$import com.chartboost.sdk.privacy.model.*</ID>
    <ID>WildcardImport:ChartboostTest.kt$import com.chartboost.sdk.privacy.model.*</ID>
    <ID>WildcardImport:ChartboostTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:CommonWebViewBase.kt$import com.chartboost.sdk.internal.WebView.*</ID>
    <ID>WildcardImport:DependencyContainerTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:ImpressionBuilderTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:ImpressionBuilderTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:InterstitialTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:OpenMeasurementControllerTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:OpenMeasurementManagerTest.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:OpenMeasurementSessionBuilderTest.kt$import com.iab.omid.library.chartboost.adsession.*</ID>
    <ID>WildcardImport:OpenMeasurementSessionBuilderTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:OpenMeasurementSessionBuilderTest.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:OpenMeasurementTrackerTest.kt$import com.iab.omid.library.chartboost.adsession.*</ID>
    <ID>WildcardImport:OpenMeasurementTrackerTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:OpenMeasurementTrackerTest.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:RemoveDataUseConsentUseCaseTest.kt$import com.chartboost.sdk.privacy.model.*</ID>
    <ID>WildcardImport:RewardedTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:SDKBiddingTemplateParserTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:SdkInitializerTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:SdkInitializerTest.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:TokenGeneratorTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:VisibilityTracker.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:WebViewCorsErrorHandlerTest.kt$import io.mockk.*</ID>
  </CurrentIssues>
</SmellBaseline>
